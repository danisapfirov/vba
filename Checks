Option Compare Database
Option Explicit

Private Const ModuleName$ = "Form: Checks"
Private Const conMaxLockSeconds = 840

Dim intStyle, Response As Integer
Dim strMsg, strTitle As String
Dim strFilter As String
Dim vbCr As String


Dim bAssignValues As Boolean
Dim lngFilterStatus As Long


Dim bResetFlags As Boolean
Dim bInService As Boolean

Dim iAffected As Integer

Dim bApplyRegNumberIDFilter   As Boolean
Dim lngRegNumberID As Long

Dim bModified As Boolean
Dim sngFreight2TripRatio As Single

Public RegNumbersList As clsList
Public AmortizationNotApplicable As clsList
Public TripDateDuplicationList As clsList
Public DisplayAvgPriceList As clsList

Dim strgetOpenArg() As String
Dim intArgs As Long
Dim idx As Long

Dim vKey As String

Private Const SELECTION_OFF As Long = 0
Private Const SELECTION_ON As Long = 1

Private Sub CalculationBegDate_AfterUpdate()

If (Not IsDate(Me.CalculationBegDate)) Or _
    (Not VerifyPeriod(Me.Name, Me.CalculationBegDate, Me.CalculationEndDate)) Then
    ' Restore previous value
    Me.CalculationBegDate = GetDate("FuelCalculationBegDate")
Else
    Call SetDate("FuelCalculationBegDate", Format(Me.CalculationBegDate, "dd/mm/yyyy"))
    Call SetDate("FuelCalculationEndDate", Format(tbLastDateM(Me.CalculationBegDate), "dd/mm/yyyy"))
    
    ' Apply Filter
    bApplyRegNumberIDFilter = CBool(curUser.DBReadSettings("CheckRegNumberIDFilter"))
    lngRegNumberID = CLng(curUser.DBReadSettings("CheckRegNumberID"))
    lngFilterStatus = FilterStatus(lngRegNumberID, bApplyRegNumberIDFilter, Me!CalculationBegDate, Me!CalculationEndDate)
    
    'ReAssignValues
    AssignValues
    
    ' Display Status
    Call Form_Current
    
End If

End Sub

Private Sub CalculationBegDate_DblClick(Cancel As Integer)

' Calculate current date
Me.CalculationBegDate = Format(Date, "dd/mm/yyyy")
Me.CalculationEndDate = Format(tbLastDateM(Date), "dd/mm/yyyy")
' Save
Call SetDate("FuelCalculationBegDate", Me.CalculationBegDate)
Call SetDate("FuelCalculationEndDate", Me.CalculationEndDate)

' Apply Filter
bApplyRegNumberIDFilter = CBool(curUser.DBReadSettings("CheckRegNumberIDFilter"))
lngRegNumberID = CLng(curUser.DBReadSettings("CheckRegNumberID"))
lngFilterStatus = FilterStatus(lngRegNumberID, bApplyRegNumberIDFilter, Me!CalculationBegDate, Me!CalculationEndDate)

'ReAssignValues
AssignValues

' Display Status
Call Form_Current

End Sub

Private Sub CalculationEndDate_AfterUpdate()

''Call SetDate("FuelCalculationEndDate", Format(Me!CalculationEndDate, "dd/mm/yyyy"))

If (Not IsDate(Me.CalculationEndDate)) Or _
    (Not VerifyPeriod(Me.Name, Me.CalculationBegDate, Me.CalculationEndDate)) Then
    ' Restore previous value
    Me.CalculationEndDate = GetDate("FuelCalculationEndDate")
Else
    Call SetDate("FuelCalculationBegDate", Format(Me.CalculationBegDate, "dd/mm/yyyy"))
    Call SetDate("FuelCalculationEndDate", Format(tbLastDateM(Me.CalculationBegDate), "dd/mm/yyyy"))
    
    ' Apply Filter
    bApplyRegNumberIDFilter = CBool(curUser.DBReadSettings("CheckRegNumberIDFilter"))
    lngRegNumberID = CLng(curUser.DBReadSettings("CheckRegNumberID"))
    lngFilterStatus = FilterStatus(lngRegNumberID, bApplyRegNumberIDFilter, Me!CalculationBegDate, Me!CalculationEndDate)
    
    'ReAssignValues
    AssignValues
    
    ' Display Status
    Call Form_Current

End If

End Sub

Private Sub CalculationEndDate_DblClick(Cancel As Integer)

Me.CalculationEndDate = Format(tbLastDateM(Me.CalculationBegDate), "dd/mm/yyyy")
' Save Date
Call SetDate("FuelCalculationEndDate", Me.CalculationEndDate)

' Apply Filter
bApplyRegNumberIDFilter = CBool(curUser.DBReadSettings("CheckRegNumberIDFilter"))
lngRegNumberID = CLng(curUser.DBReadSettings("CheckRegNumberID"))
lngFilterStatus = FilterStatus(lngRegNumberID, bApplyRegNumberIDFilter, Me!CalculationBegDate, Me!CalculationEndDate)

'ReAssignValues
AssignValues

' Display Status
Call Form_Current
    
End Sub

Private Sub cmdCalculationCalendar2_Click()
On Error GoTo cmdCalculationCalendar2_Click_Err

Dim varGetDate As Variant
    
varGetDate = adhDoCalendar((Me.[CalculationBegDate]))

    If Not IsNull(varGetDate) Then
        
        If VerifyPeriod(Me.Name, Me.CalculationBegDate, CDate(varGetDate)) Then
        
            Me.CalculationEndDate = Format(CDate(varGetDate), "dd/mm/yyyy")
            ' Save EndDate
            Call SetDate("FuelCalculationEndDate", Me.CalculationEndDate)
            
            ' Apply Filter
            bApplyRegNumberIDFilter = CBool(curUser.DBReadSettings("CheckRegNumberIDFilter"))
            lngRegNumberID = CLng(curUser.DBReadSettings("CheckRegNumberID"))
            lngFilterStatus = FilterStatus(lngRegNumberID, bApplyRegNumberIDFilter, Me!CalculationBegDate, Me!CalculationEndDate)
            
            'ReAssignValues
            AssignValues
            
            ' Display Status
            Call Form_Current
                
        End If
        
    End If
    
Exit_cmdCalculationCalendar2_Click:
    Exit Sub

cmdCalculationCalendar2_Click_Err:
    Call LogMsgError(Err.Description, Err.Number, Form.Name, "cmdCalculationCalendar2_Click")
    Resume Exit_cmdCalculationCalendar2_Click
End Sub

'Dim TTip1 As clsToolTip  ' ToolTip class

Private Sub cmdTimeliness_Click()
On Error GoTo cmdTimeliness_Click_Err

CalculationBegDate = GetDate("FuelCalculationBegDate")
CalculationEndDate = GetDate("FuelCalculationEndDate")

If Not VerifyPeriod(Me.Name, CalculationBegDate, CalculationEndDate, 2) Then
    Exit Sub
End If

Dim intDays As Integer
Dim intMonths As Integer


Dim sngFuelConsumptionHighway As Single
Dim sngFuelConsumptionCity As Single
Dim sngFuelConsumptionHillyTerrain As Single
Dim sngFuelConsumptionMountainTerrain As Single
Dim sngFuelConsumptionMiningTerrain As Single
Dim sngOilConsumption As Single
Dim sngDistanceNorm As Single

Dim sngLastFuelStart As Single
Dim sngLastFuelAdded As Single
Dim sngLastFuelEnd As Single

Dim sngLastOilStart As Single
Dim sngLastOilAdded As Single
Dim sngLastOilEnd As Single

Dim sngFuelNorm As Single
Dim sngOilNorm As Single
Dim sngDailyFuelAdded As Single
Dim sngDailyOilAdded As Single
Dim sngFuelLoad As Single
Dim sngOilLoad As Single

Dim sngFuelDeviation As Single
Dim sngFuelDeviationTotal As Single
Dim sngOilDeviation As Single

Dim sngFuelDeviationValue As Single
Dim sngOilDeviationValue As Single

Dim sngDevAddition As Single
Dim sngDevRetention As Single

Dim sngFuelFactor As Single
Dim sngOilFactor As Single

Dim sngOneCourse As Single ' Dump body lifting

Dim lngFuelID As Long
Dim lngDriverID As Long
Dim lngExpCenterID As Long
Dim lngTrailerID As Long

Dim sngTripDistance As Single
Dim sngFreightDistance As Single
Dim sngWorkHours As Single
                  
Dim strFilter As String
                    
Dim sngTow As Single
Dim sngTowCargo As Single

Dim strTargetRegNumberID As String

' Fiel & Oil consistency
Dim sngFuelTankCapacity As Single
Dim sngFuelStart As Single
Dim sngFuelEnd As Single
Dim sngOilCapacity As Single
Dim sngOilStart As Single
Dim sngOilEnd As Single


strTargetRegNumberID = curUser.DBReadSettings("CheckRegNumberID")
bApplyRegNumberIDFilter = CBool(curUser.DBReadSettings("CheckRegNumberIDFilter"))

Dim conConnection As ADODB.Connection

Dim strSQLActiveSet As String   ' Active vehicle set
Dim strSQLVehicle As String
Dim strSQLTrips  As String
Dim StrSQLCounter As String

Dim rstActiveSet As ADODB.Recordset ' Active vehicle set
Dim rstTrips As ADODB.Recordset
Dim rstCounter As ADODB.Recordset

' Cache
intArgs = 0

Dim intErrors As Long
intErrors = 0

Me.Form.Painting = False
DoCmd.Hourglass True
  
' Active vehicle set
strSQLActiveSet = " SELECT [RLF Top].ID, [RLF Top].RegNumberID, [RLF Top].LastMiddle "
strSQLActiveSet = strSQLActiveSet & " FROM [RLF Top] "
strSQLActiveSet = strSQLActiveSet & " ORDER BY [RLF Top].ID;"

Set conConnection = CurrentProject.Connection
Set rstActiveSet = New ADODB.Recordset
rstActiveSet.CursorLocation = adUseClient
rstActiveSet.CacheSize = 30
rstActiveSet.Open strSQLActiveSet, conConnection, adOpenStatic, adLockReadOnly, adCmdText

' Start > 1. StatusMeter: Initialisation
Dim TotalRec As Long         ' Total number of records
Dim fOK As Boolean
TotalRec = 0
Dim StatusMeter As clsStatusMeter
Set StatusMeter = New clsStatusMeter

' Clear any previous detail info for the current user
StatusMeter.ahtClearDetailTable (curUser.UserID)
' Display StatusMeter
DoCmd.OpenForm ahtcMeterForm
' Init
Call StatusMeter.Init(Msg("Timeliness check", "Ïðîâåðêà íà àêòóàëíîñòòà", LAN10_BG_Bulgarian) & " ...", True, 100)
' < 1. StatusMeter

TotalRec = rstActiveSet.RecordCount
  
' > Main Recordset (rstActiveSet)
If Not rstActiveSet.EOF Then
    
    ' >> 2. StatusMeter: Estimate & Display Total Records
    Call StatusMeter.TotalRecords(TotalRec)
    '<< 2. StatusMeter
    
    If bApplyRegNumberIDFilter Then
        Call StatusMeter.AddInfo("Info", Msg("One item has been selected for processing", "Åäèí å èçáðàí çà îáðàáîòêà", LAN10_BG_Bulgarian))
    End If
    
    ' > Events Stat Reset
    sysEvents.ResetMsgStat
    ' < Events Stat Reset
    
    ' Loop through the Main recordset (rstActiveSet) until the end of file (EOF) is reached
    Do While Not rstActiveSet.EOF

        ' >>> 3. StatusMeter: Update Header
        ' Check for Cancel
        fOK = StatusMeter.UpdateHeaderCancel(0)
                
        If Not fOK Then

            Me.Form.Refresh
            Me.Form.Painting = True

            ' Update status info
            Call StatusMeter.AddInfo("Userabort", Msg("The process was cancelled", "Ïðîöåñà å ïðåêúñíàò", LAN10_BG_Bulgarian) & " " & curUser.LoginName() & ".")
                                    
            If Not CBool(curUser.DBReadSettings("StatusMeterDetails")) Then
            
                Call MsgBox(Msg("The process was cancelled", "Ïðîöåñà å ïðåêúñíàò", LAN10_BG_Bulgarian) & "!", _
                vbOKOnly + vbInformation, Msg("Timeliness check", "Ïðîâåðêà íà àêòóàëíîñòòà", LAN10_BG_Bulgarian))
                
            End If
            
            GoTo WrapUp
            
        End If
        ' <<< 3. StatusMeter
    
        ' Active Vehicle select
        ' Construct SQL query for all vehicles
        lngRegNumberID = rstActiveSet(1)
        
        ' Active Vehicle select
        If Not bApplyRegNumberIDFilter Then
        
            ' Construct SQL query for all vehicles
            lngRegNumberID = rstActiveSet(1)
                
        Else
        
            ' Construct SQL query for the specific vehicle
            lngRegNumberID = CLng(strTargetRegNumberID)
        
        End If
                       
        ' Read ActiveSet. One time ONLY for every asset
        ' Look for sngFuelConsumptionHighway, Monthly and Daily
        If Not GetTruckSettings(lngRegNumberID, CalculationBegDate, _
            strRegNumber, bInService, lngDriverID, lngExpCenterID, sngFuelConsumptionHighway, sngFuelConsumptionCity, sngFuelConsumptionHillyTerrain, _
            sngFuelConsumptionMountainTerrain, sngFuelConsumptionMiningTerrain, sngOneCourse, _
            sngFuelTankCapacity, lngFuelID, sngOilConsumption, sngOilCapacity, sngDistanceNorm, sngDevAddition, sngDevRetention) Then
            
            ' Failed to read vehicle data. GoTo the next vehicle
            GoTo NextActiveSet:
                    
        End If
            
        ' Debug
        '' If lngRegNumberID <> 444 Then GoTo NextActiveSet
              
        Dim lngLastMiddleID As Long
        Dim intMonthLast As Integer
        Dim intYearLast As Integer
        Dim SDateLast As Date
        Dim SDateTarget As Date

        ' Target period
        intMonthLast = DatePart("m", curUser.DBReadSettings("FuelCalculationBegDate"))
        intYearLast = DatePart("YYYY", curUser.DBReadSettings("FuelCalculationBegDate"))
        SDateTarget = Format(DateSerial(intYearLast, intMonthLast, 1), "dd/mm/yyyy")
        
        ' >> Check for the most recent monthly period
        lngLastMiddleID = GetLastPeriod(conConnection, lngRegNumberID, SDateLast)
        
        If Not CBool(lngLastMiddleID) Then
        
            ' Failed find existing period. No previous period exists.
            strEvent = strRegNumber & ": " & Msg("Missing entered data for reporting period", "Ëèïñâàò âúâåäåíè äàííè çà îò÷åòåí ïåðèîä", LAN10_BG_Bulgarian)
                
            If sysEvents.AddEvent(strEvent, , "Action", ALERT5_ACTIONCRITICAL, CAT4_TRIPLOG, 1, 1) Then
                Call StatusMeter.AddInfo("Action", strEvent)
            End If
                 
        Else
            
            ' A previous period was found
            ' Calculate the number of months between current date and the last period
            intMonths = DateDiff("m", Date, SDateLast)
            
            strEvent = strRegNumber & ": " & Msg("Last reporting period", "Ïîñëåäåí îò÷åòåí ïeðèîä", LAN10_BG_Bulgarian)
            strEventDetails = Format(SDateLast, "yyyy/mm")
            
            ' >> Service check
            If Not CBool(bInService) Then
            
                ' Out of service
                strEvent = strRegNumber & ": " & Msg("Out of service", "Íå ñå èçïîëçâà", LAN10_BG_Bulgarian)
                                    
                If sysEvents.AddEvent(strEvent, , "Info", ALERT1_Info, CAT4_TRIPLOG, 1, 1) Then
                
                    Call StatusMeter.AddInfo("Info", strRegNumber & ": " & Format(SDateLast, "yyyy/mm") & " " & _
                                     Msg("last period", "ïîñëåäåí ïeðèîä", LAN10_BG_Bulgarian) & ". " & _
                                     Msg("Out of service", "Íå ñå èçïîëçâà", LAN10_BG_Bulgarian) & ".")
                    
                End If
            
            Else
            
                ' In service
                If intMonths < -1 Then
                
                    strEvent = strRegNumber & ": " & Msg("Significant delay", "Çíà÷èòåëíî èçîñòàâàíå", LAN10_BG_Bulgarian)
                    strEventDetails = Format(SDateLast, "yyyy/mm") & ": " & Format(Abs(intMonths), "#0") & " " & _
                                            Msg("months", "ìåñåöà", LAN10_BG_Bulgarian) & " " & Msg("compared to the current date", "ñðàâíåíî ñ äíåøíà äàòà", LAN10_BG_Bulgarian) & "."
                
                    If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT4_ATTNIMPORTANT, CAT4_TRIPLOG, 1, 1) Then
                    
                        Call StatusMeter.AddInfo("Action", strRegNumber & ": " & Format(SDateLast, "yyyy/mm") & " " & _
                                                Msg("last period", "ïîñëåäåí ïeðèîä", LAN10_BG_Bulgarian) & ". " & _
                                                Msg("Significant delay", "Çíà÷èòåëíî èçîñòàâàíå", LAN10_BG_Bulgarian) & ".")
                        
                    End If
                    
                ElseIf intMonths < 0 Then
                
                    strEvent = strRegNumber & ": " & Msg("Delay", "Èçîñòàâàíå", LAN10_BG_Bulgarian)
                    strEventDetails = Format(SDateLast, "yyyy/mm") & " " & Msg("compared to the current date", "ñðàâíåíî ñ äíåøíà äàòà", LAN10_BG_Bulgarian) & "."
                

                    If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT3_ATTNRECOMMENDED, CAT4_TRIPLOG, 1, 1) Then
                    
                        Call StatusMeter.AddInfo("Attention", strRegNumber & ": " & Format(SDateLast, "yyyy/mm") & " " & _
                                                Msg("last period", "ïîñëåäåí ïeðèîä", LAN10_BG_Bulgarian) & ". " & _
                                                Msg("Delay", "Èçîñòàâàíå", LAN10_BG_Bulgarian) & ".")
                                                
                    End If
                    
                Else
                
                
                    strEvent = strRegNumber & ": " & Msg("On time", "Íàâðåìå", LAN10_BG_Bulgarian)
                    strEventDetails = Format(SDateLast, "yyyy/mm") & " " & Msg("compared to the current date", "ñðàâíåíî ñ äíåøíà äàòà", LAN10_BG_Bulgarian) & "."
                

                    If sysEvents.AddEvent(strEvent, strEventDetails, "Info", ALERT2_Warning, CAT4_TRIPLOG, 1, 1) Then
                    
                        Call StatusMeter.AddInfo("Info", strRegNumber & ": " & Format(SDateLast, "yyyy/mm") & " " & _
                                                Msg("last period", "ïîñëåäåí ïeðèîä", LAN10_BG_Bulgarian) & ". " & _
                                                Msg("On time", "Íàâðåìå", LAN10_BG_Bulgarian) & ".")
                        
                    End If
                
                End If
            
            End If
            ' Service check <<
        End If
        ' Check for the most recent monthly period <<
        
NextActiveSet:

        If bApplyRegNumberIDFilter Then
            ' Single Vehicle, No other vehicles
            ' Go To the end
            rstActiveSet.MoveLast
        
        End If
        
        ' Next Active Vehicle from the active set
        rstActiveSet.MoveNext
    
        ' >>>> 4. StatusMeter: Increment Counter
        Call StatusMeter.UpdateMeter(1)
        ' <<<< 4. StatusMeter
    
    Loop
    ' Loop through the recordset (rstActiveSet) until the end of file (EOF) is reached

End If '
' < Main Recordset (rstActiveSet)
'--------------------

If sysEvents.TotalMsgs > 0 Then

    Call StatusMeter.AddInfo("Info", sysEvents.ALERT1_Info & " (" & Format(sysEvents.ALERT1_Info / sysEvents.TotalMsgs, "#.0%") & ") " & Msg("Out of service", "Íå ñå èçïîëçâà", LAN10_BG_Bulgarian))
    Call StatusMeter.AddInfo("Info", sysEvents.ALERT2_Warning & " (" & Format(sysEvents.ALERT2_Warning / sysEvents.TotalMsgs, "#.0%") & ") " & Msg("On time", "Íàâðåìå", LAN10_BG_Bulgarian))
    Call StatusMeter.AddInfo("Attention", sysEvents.ALERT3_Recommended & " (" & Format(sysEvents.ALERT3_Recommended / sysEvents.TotalMsgs, "#.0%") & ") " & Msg("Delay", "Èçîñòàâàíå", LAN10_BG_Bulgarian))
    Call StatusMeter.AddInfo("Attention", sysEvents.ALERT4_Important & " (" & Format(sysEvents.ALERT4_Important / sysEvents.TotalMsgs, "#.0%") & ") " & Msg("Significant delay", "Çíà÷èòåëíî èçîñòàâàíå", LAN10_BG_Bulgarian))
    Call StatusMeter.AddInfo("Action", sysEvents.ALERT5_Critical & " (" & Format(sysEvents.ALERT5_Critical / sysEvents.TotalMsgs, "#.0%") & ") " & Msg("No data entered", "Ëèïñâàò âúâåäåíè äàííè", LAN10_BG_Bulgarian))
    
End If

WrapUp:
rstActiveSet.Close
conConnection.Close

' > Events Stat Report
' If sysEvents.TotalMsgs > 0 Then Call StatusMeter.AddInfo("Info", Msg("Messages", "Ñúîáùåíèÿ", LAN10_BG_Bulgarian))
''If sysEvents.ALERT1_Info > 0 Then Call StatusMeter.AddInfo("Info", Msg("On time", "Íàâðåìå", LAN10_BG_Bulgarian) & ": " & sysEvents.ALERT1_Info)
' If sysEvents.ALERT2_Warning > 0 Then Call StatusMeter.AddInfo("Info", Msg("Warning", "Ïðåäóïðåæäåíèÿ", LAN10_BG_Bulgarian) & ": " & sysEvents.ALERT2_Warning)
''If sysEvents.ALERT3_Recommended > 0 Then Call StatusMeter.AddInfo("Attention", Msg("Catching up", "Íàâàêñâàíå", LAN10_BG_Bulgarian) & ": " & sysEvents.ALERT3_Recommended)
' If sysEvents.ALERT4_Important > 0 Then Call StatusMeter.AddInfo("Attention", Msg("Important errors", "Âàæíè ãðåøêè", LAN10_BG_Bulgarian) & ": " & sysEvents.ALERT4_Important)
''If sysEvents.ALERT5_Critical > 0 Then Call StatusMeter.AddInfo("Action", Msg("Late", "Èçîñòàâàíå", LAN10_BG_Bulgarian) & ": " & sysEvents.ALERT5_Critical)
' If sysEvents.ALERT6_Urgent > 0 Then Call StatusMeter.AddInfo("Action", Msg("Urgent errors", "Ñïåøíè ãðåøêè", LAN10_BG_Bulgarian) & ": " & sysEvents.ALERT6_Urgent)



' < Events Stat Report

If fOK And StatusMeter.AutoHide Then
    ' End of process
    ' >>>>> 5. StatusMeter: Close the Form & Deasign the Class
    If StatusMeter.IsOpen(ahtcMeterForm) Then
        DoCmd.Close acForm, ahtcMeterForm
    End If
    ' Close the class
    Set StatusMeter = Nothing
    '<<<<< 5. End StatusMeter

ElseIf fOK And Not StatusMeter.AutoHide Then

    ' End of operation with detailed view
    If (curUser.PermissionLevel < UserRole.ROLE5_Admin) Then
        Call StatusMeter.AddInfo("Time", Msg("Time") & ": " & StatusMeter.StrTime(True) & ".")
    Else
        Call StatusMeter.AddInfo("Time", Msg("Time") & ": " & StatusMeter.StrTime(True) & ".")
        ''Call StatusMeter.AddInfo("Info", "Vehicle Info Cache Hits/Requests" & ": " & MyCacheVehicleInfo.EffectivenessStr)
        ''Call StatusMeter.AddInfo("Info", "Vehicle Info Memory Used/Total" & ": " & MyCacheVehicleInfo.RatioStr)
        ''Call StatusMeter.AddInfo("Info", "Events Cache Hits/Requests" & ": " & sysEvents.EffectivenessStr)
        ''Call StatusMeter.AddInfo("Info", "Events Memory Used/Total" & ": " & sysEvents.RatioStr)
    End If
         
    Call StatusMeter.AddInfoTX("Success", Msg("Done", "Ãîòîâî", LAN10_BG_Bulgarian) & ".")
    Call StatusMeter.UpdateMeter(TotalRec)
      
ElseIf Not fOK And Not StatusMeter.Details Then

    ' Cancelled by user, no detailed view
    ' >>>>> 5. StatusMeter: Close the Form & Deasign the Class
    If StatusMeter.IsOpen(ahtcMeterForm) Then
        DoCmd.Close acForm, ahtcMeterForm
    End If
    ' Close the class
    Set StatusMeter = Nothing
    '<<<<< 5. End StatusMeter
    
ElseIf Not fOK And StatusMeter.Details Then

    ' Operation cancelled by user, detail view
    If (curUser.PermissionLevel < UserRole.ROLE5_Admin) Then
        Call StatusMeter.AddInfo("Time", Msg("Time") & ": " & StatusMeter.StrTime(True) & ".")
    Else
        Call StatusMeter.AddInfo("Time", Msg("Time") & ": " & StatusMeter.StrTime(True) & ".")
        ''Call StatusMeter.AddInfo("Info", "Vehicle Info Cache Hits/Requests" & ": " & MyCacheVehicleInfo.EffectivenessStr)
        ''Call StatusMeter.AddInfo("Info", "Vehicle Info Memory Used/Total" & ": " & MyCacheVehicleInfo.RatioStr)
        ''Call StatusMeter.AddInfo("Info", "Events Cache Hits/Requests" & ": " & sysEvents.EffectivenessStr)
        ''Call StatusMeter.AddInfo("Info", "Events Memory Used/Total" & ": " & sysEvents.RatioStr)
    End If
         
    Call StatusMeter.AddInfoTX("Success", Msg("Done", "Ãîòîâî", LAN10_BG_Bulgarian) & ".")
    Call StatusMeter.UpdateMeter(TotalRec)
    
End If

Exit_cmdTimeliness_Click:
    Set rstActiveSet = Nothing
    Set conConnection = Nothing
    
    ' >>>>>> 6. StatusMeter: Deassign the Class. Form may be still open.
    Set StatusMeter = Nothing
    ' <<<<<< 6. End StatusMeter

                
    ''strEvent = Trim(Msg("Timeliness", "Àêòóàëíîñò", LAN10_BG_Bulgarian))
    strEventDetails = Msg("Timeliness check", "Ïðîâåðêà íà àêòóàëíîñòòà", LAN10_BG_Bulgarian)
    ''Call sysEvents.AddMessage(strEvent, strEventDetails, "Info", ALERT1_Info, CAT8_ADMIN, 1, 1)
    Call curUser.PerfIndex(strEventDetails, 1, TotalRec)
    Call SysCmd(acSysCmdSetStatus, strEventDetails)

    Me.Form.Refresh                 ' Refresh data
    Me.Form.Painting = True
    DoCmd.Hourglass False
    Exit Sub

cmdTimeliness_Click_Err:
    If Not rstActiveSet Is Nothing Then
        If rstActiveSet.State = adStateOpen Then rstActiveSet.Close
    End If
    If Not conConnection Is Nothing Then
        If conConnection.State = adStateOpen Then conConnection.Close
    End If
    Call LogMsgError(Err.Description, Err.Number, ModuleName$, "cmdTimeliness_Click")
    Resume Exit_cmdTimeliness_Click
End Sub


Private Sub cmdNextMonth_Click()
On Error GoTo cmdNextMonth_Click_Err

'Next Month
Dim intYear As Integer
Dim intMonth As Integer

intMonth = Month(GetDate("FuelCalculationBegDate"))
intYear = Year(GetDate("FuelCalculationBegDate"))

Me.CalculationBegDate.Locked = False
Me.CalculationEndDate.Locked = False

' Calculate Dates
Me.CalculationBegDate = DateSerial(intYear, intMonth + 1, 1)
Me.CalculationEndDate = Format(tbLastDateM(Me.CalculationBegDate), "dd/mm/yyyy")

' Save Dates
Call SetDate("FuelCalculationBegDate", Format(Me.CalculationBegDate, "dd/mm/yyyy"))
Call SetDate("FuelCalculationEndDate", Format(Me.CalculationEndDate, "dd/mm/yyyy"))

Me.CalculationBegDate.Locked = True
Me.CalculationEndDate.Locked = True

' Apply Filter
bApplyRegNumberIDFilter = CBool(curUser.DBReadSettings("CheckRegNumberIDFilter"))
lngRegNumberID = CLng(curUser.DBReadSettings("CheckRegNumberID"))
lngFilterStatus = FilterStatus(lngRegNumberID, bApplyRegNumberIDFilter, Me!CalculationBegDate, Me!CalculationEndDate)

'ReAssignValues
AssignValues

' Display Status
Call Form_Current

Exit_cmdNextMonth_Click:
    Exit Sub

cmdNextMonth_Click_Err:
    MsgBox Err.Description
    Resume Exit_cmdNextMonth_Click
End Sub

Private Sub cmdPrevMonth_Click()
On Error GoTo cmdPrevMonth_Click_Err

'Previous Month
Dim intYear As Integer
Dim intMonth As Integer

intMonth = Month(GetDate("FuelCalculationBegDate"))
intYear = Year(GetDate("FuelCalculationBegDate"))

Me.CalculationBegDate.Locked = False
Me.CalculationEndDate.Locked = False

' Calculate Dates
Me.CalculationBegDate = DateSerial(intYear, intMonth - 1, 1)
Me.CalculationEndDate = Format(tbLastDateM(Me.CalculationBegDate), "dd/mm/yyyy")

' Save Dates
Call SetDate("FuelCalculationBegDate", Format(Me.CalculationBegDate, "dd/mm/yyyy"))
Call SetDate("FuelCalculationEndDate", Format(Me.CalculationEndDate, "dd/mm/yyyy"))

Me.CalculationBegDate.Locked = True
Me.CalculationEndDate.Locked = True

' Apply Filter
bApplyRegNumberIDFilter = CBool(curUser.DBReadSettings("CheckRegNumberIDFilter"))
lngRegNumberID = CLng(curUser.DBReadSettings("CheckRegNumberID"))
lngFilterStatus = FilterStatus(lngRegNumberID, bApplyRegNumberIDFilter, Me!CalculationBegDate, Me!CalculationEndDate)

'ReAssignValues
AssignValues

' Display Status
Call Form_Current

Exit_cmdPrevMonth_Click:
    Exit Sub

cmdPrevMonth_Click_Err:
    MsgBox Err.Description
    Resume Exit_cmdPrevMonth_Click
End Sub

Private Sub cmdPeriods_Click()
On Error GoTo cmdPeriods_Click_Err

' Open Settings
DoCmd.OpenForm "ChecksDlg", , , , , acDialog, CStr(GetDate("FuelCalculationBegDate") & "-" & CStr(GetDate("FuelCalculationEndDate"))) & _
                                    "," & CStr(Me!MiddleID)

' Checl OK or Cancel
If Not (CBool(curUser.DBReadSettings("vbOkCancel"))) Then Exit Sub

' OK, Go to Processing
CalculationBegDate = GetDate("FuelCalculationBegDate")
CalculationEndDate = GetDate("FuelCalculationEndDate")

If Not VerifyPeriod(Me.Name, CalculationBegDate, CalculationEndDate, 2) Then
    Exit Sub
End If

Dim intDays As Integer
Dim intMonths As Integer

Dim bOncePerVehicle As Boolean

' Previous and Current Periods
Dim lngMiddleIDPrev As Long
Dim lngMiddleIDCurr As Long
Dim lngMiddleIDNext As Long

Dim lngDataIDLast As Long
Dim lngDataIDNext As Long

Dim sngMilesPrev As Single
Dim sngMilesCurr As Single

Dim sngFuelPrev As Single
Dim sngFuelCurr As Single

Dim sngOilPrev As Single
Dim sngOilCurr As Single

Dim bMilesMatch As Boolean
Dim bFuelMatch As Boolean
Dim bOilMatch As Boolean

' FixPeriod2Vehicle
Dim lngRegNumberIDFix As Long
Dim lngMiddleIDFix As Long
Dim lngDataIDFix As Long
Dim dtDateFix As Date
Dim sngFuelStartFix As Single
Dim sngOilStartFix As Single
Dim sngFuelEndFix As Single
Dim sngOilEndFix As Single

Dim byteFuelEndGauged As Byte
Dim byteOilEndGauged As Byte

Dim CalculatedFuelConsumptionHighway As Single
Dim CalculatedFuelConsumptionCity As Single
Dim CalculatedFuelConsumptionHillyTerrain As Single
Dim CalculatedFuelConsumptionMountainTerrain As Single
Dim CalculatedFuelConsumptionMiningTerrain As Single
Dim CalculatedFuelConsumptionDumpBodyLifting As Single
Dim CalculatedFuelConsumptionTow As Single

Dim sngFuelConsumptionHighway As Single
Dim sngFuelConsumptionCity As Single
Dim sngFuelConsumptionHillyTerrain As Single
Dim sngFuelConsumptionMountainTerrain As Single
Dim sngFuelConsumptionMiningTerrain As Single
Dim sngOilConsumption As Single
Dim sngDistanceNorm As Single

Dim sngLastFuelStart As Single
Dim sngLastFuelAdded As Single
Dim sngLastFuelEnd As Single

Dim sngLastOilStart As Single
Dim sngLastOilAdded As Single
Dim sngLastOilEnd As Single

Dim sngFuelNorm As Single
Dim sngOilNorm As Single
Dim sngDailyFuelAdded As Single
Dim sngDailyOilAdded As Single
Dim sngFuelLoad As Single
Dim sngOilLoad As Single

Dim sngFuelDeviation As Single
Dim sngFuelDeviationTotal As Single
Dim sngOilDeviation As Single

Dim sngFuelDeviationValue As Single
Dim sngOilDeviationValue As Single

Dim sngIntermediateFuelDeviation As Single
Dim sngIntermediateOilDeviation As Single

Dim sngDevAddition As Single
Dim sngDevRetention As Single

Dim sngFuelDeviationDriver As Single
Dim sngOilDeviationDriver As Single

Dim dblFuelPriceAvg As Double
Dim dblOilPriceAvg As Double

Dim sngFuelFactor As Single
Dim sngOilFactor As Single

Dim sngOneCourse As Single ' Dump body lifting

' Amortization
Dim dblDailyAmortizationCost As Double
Dim dblVehiclePurchaseCost As Double
Dim dtVehicleDateOfPurchase As Date
Dim dtTruckWarrantyExpireDate As Date
Dim sngVehicleDepreciationPeriod As Single
Dim sngVehicleWorkDaysInMonth As Single
Dim dblTrailerDailyAmortizationCost As Double
Dim lngDays As Long

Dim sngActualWorkDaysInMonth As Single

Dim TrailerDistanceNorm As Single
Dim Weight As Double

Dim lngFuelID As Long
Dim lngDriverID As Long
Dim lngExpCenterID As Long
Dim lngTrailerID As Long

Dim sngTripDistance As Single
Dim sngFreightDistance As Single
Dim sngWorkHours As Single

Dim StatStrSQL As String
                   
Dim strDuplicationList As String
Dim strFilter As String
                    
Dim sngTow As Single
Dim sngTowCargo As Single

Dim WeightedAverageCost As Double
Dim UnitsInStock As Single
Dim Warehouse As String
Dim ItemName As String
Dim ItemsTransfered As Long
Dim ItemsNotTransfered As Long
Dim strTargetRegNumberID As String
Dim bApplyRegNumberIDFilter As Boolean

' Fiel & Oil consistency
Dim sngFuelTankCapacity As Single
Dim sngFuelStart As Single
Dim sngFuelEnd As Single
Dim sngOilCapacity As Single
Dim sngOilStart As Single
Dim sngOilEnd As Single

' Odometer consistency
Dim sngMilesOut As Single
Dim sngMilesIn As Single

strTargetRegNumberID = curUser.DBReadSettings("CheckRegNumberID")
bApplyRegNumberIDFilter = CBool(curUser.DBReadSettings("CheckRegNumberIDFilter"))

Dim conConnection As ADODB.Connection

Dim strSQLActiveSet As String   ' Active vehicle set
Dim strSQLVehicle As String
Dim strSQLTrips  As String
Dim StrSQLCounter As String

Dim rstActiveSet As ADODB.Recordset ' Active vehicle set
Dim rstVehicle As ADODB.Recordset
Dim rstTrips As ADODB.Recordset
Dim rstCounter As ADODB.Recordset

' Linked List
Set RegNumbersList = New clsList
Set AmortizationNotApplicable = New clsList
Set DisplayAvgPriceList = New clsList
Set TripDateDuplicationList = New clsList

' Cache
intArgs = 0

Dim intErrors As Long
intErrors = 0
ItemsTransfered = 0
ItemsNotTransfered = 0

Me.Form.Painting = False
DoCmd.Hourglass True
  
' Active vehicle set
strSQLActiveSet = " SELECT [RLF Top].ID, [RLF Top].RegNumberID, [RLF Top].LastMiddle "
strSQLActiveSet = strSQLActiveSet & " FROM [RLF Top] "
strSQLActiveSet = strSQLActiveSet & " ORDER BY [RLF Top].ID;"

Set conConnection = CurrentProject.Connection
Set rstActiveSet = New ADODB.Recordset
rstActiveSet.CursorLocation = adUseClient
rstActiveSet.CacheSize = 30
rstActiveSet.Open strSQLActiveSet, conConnection, adOpenStatic, adLockReadOnly, adCmdText

' Start > 1. StatusMeter: Initialisation
Dim TotalRec As Long         ' Total number of records
Dim fOK As Boolean
TotalRec = 0
Dim StatusMeter As clsStatusMeter
Set StatusMeter = New clsStatusMeter

' Clear any previous detail info for the current user
StatusMeter.ahtClearDetailTable (curUser.UserID)
' Display StatusMeter
DoCmd.OpenForm ahtcMeterForm
' Init
Call StatusMeter.Init(Msg("Checking existing periods and adding new ones", "Ïðîâåðÿâàíå íà òåêóùèòå ïåðèîäè è äîáàâÿíå íà íîâè", LAN10_BG_Bulgarian) & " ...", True, 100)
' < 1. StatusMeter

TotalRec = rstActiveSet.RecordCount
  
''Set MyCacheVehicleInfo = New clsCache: MyCacheVehicleInfo.InitialAllocation = TotalRec * 0.8: MyCacheVehicleInfo.GrowthFactor = 1.1

' > Main Recordset (rstActiveSet)
If Not rstActiveSet.EOF Then
    
    ' >> 2. StatusMeter: Estimate & Display Total Records
    Call StatusMeter.TotalRecords(TotalRec)
    '<< 2. StatusMeter
    
    If bApplyRegNumberIDFilter Then
        Call StatusMeter.AddInfo("Info", Msg("One item has been selected for processing", "Åäèí å èçáðàí çà îáðàáîòêà", LAN10_BG_Bulgarian))
    End If
    
    ' Loop through the Main recordset (rstActiveSet) until the end of file (EOF) is reached
    Do While Not rstActiveSet.EOF

        ' > Events Stat Reset
        sysEvents.ResetMsgStat
        ' < Events Stat Reset
                
        ' >>> 3. StatusMeter: Update Header
        ' Check for Cancel
        fOK = StatusMeter.UpdateHeaderCancel(0)
                
        If Not fOK Then

            Me.Form.Refresh
            Me.Form.Painting = True

            ' Update status info
            Call StatusMeter.AddInfo("Userabort", Msg("The process was cancelled", "Ïðîöåñà å ïðåêúñíàò", LAN10_BG_Bulgarian) & " " & curUser.LoginName() & ".")
                                    
            If Not CBool(curUser.DBReadSettings("StatusMeterDetails")) Then
            
                Call MsgBox(Msg("The process was cancelled", "Ïðîöåñà å ïðåêúñíàò", LAN10_BG_Bulgarian) & "!", _
                vbOKOnly + vbInformation, Msg("Calculate Fuel Quantity available"))
                
            End If
            
            GoTo WrapUp
            
        End If
        ' <<< 3. StatusMeter
    
        ' Active Vehicle select
        If Not bApplyRegNumberIDFilter Then
        
            ' Construct SQL query for all vehicles
            lngRegNumberID = rstActiveSet(1)

''            strSQLVehicle = " SELECT [RLF Data].MiddleLink, [RLF Middle].TopLink "
''            strSQLVehicle = strSQLVehicle & " FROM [RLF Top] INNER JOIN ([RLF Middle] INNER JOIN [RLF Data] ON [RLF Middle].MiddleID = [RLF Data].MiddleLink) ON [RLF Top].RegNumberID = [RLF Middle].TopLink "
''            strSQLVehicle = strSQLVehicle & " WHERE [RLF Middle].TopLink = " & lngRegNumberID
''            strSQLVehicle = strSQLVehicle & " AND [RLF Data].Date >= " & SQLDate(CalculationBegDate)
''            strSQLVehicle = strSQLVehicle & " AND [RLF Data].Date <= " & SQLDate(CalculationEndDate)
''            strSQLVehicle = strSQLVehicle & " GROUP BY [RLF Data].MiddleLink, [RLF Middle].TopLink;"
        
        Else
        
            ' Construct SQL query for the specific vehicle
            lngRegNumberID = CLng(strTargetRegNumberID)
            
''            strSQLVehicle = " SELECT [RLF Data].MiddleLink, [RLF Middle].TopLink "
''            strSQLVehicle = strSQLVehicle & " FROM [RLF Top] INNER JOIN ([RLF Middle] INNER JOIN [RLF Data] ON [RLF Middle].MiddleID = [RLF Data].MiddleLink) ON [RLF Top].RegNumberID = [RLF Middle].TopLink "
''            strSQLVehicle = strSQLVehicle & " WHERE [RLF Middle].TopLink = " & lngRegNumberID
''            strSQLVehicle = strSQLVehicle & " AND [RLF Data].Date >= " & SQLDate(CalculationBegDate)
''            strSQLVehicle = strSQLVehicle & " AND [RLF Data].Date <= " & SQLDate(CalculationEndDate)
''            strSQLVehicle = strSQLVehicle & " GROUP BY [RLF Data].MiddleLink, [RLF Middle].TopLink;"
        
        
        End If
        
        ' Zero total fuel deviation for trips loop
        sngFuelDeviationTotal = 0
               
        ' Read ActiveSet. One time ONLY for every asset
        ' Look for sngFuelConsumptionHighway, Monthly and Daily
        If Not GetTruckSettings(lngRegNumberID, CalculationBegDate, _
            strRegNumber, bInService, lngDriverID, lngExpCenterID, sngFuelConsumptionHighway, sngFuelConsumptionCity, sngFuelConsumptionHillyTerrain, _
            sngFuelConsumptionMountainTerrain, sngFuelConsumptionMiningTerrain, sngOneCourse, _
            sngFuelTankCapacity, lngFuelID, sngOilConsumption, sngOilCapacity, sngDistanceNorm, sngDevAddition, sngDevRetention) Then
            
            ' Failed to read vehicle data. GoTo the next vehicle
            GoTo NextActiveSet:
                    
        End If
            
        ' Debug
        '' If lngRegNumberID <> 444 Then GoTo NextActiveSet
        
        '--------------------
        ' Vehicle Period trip log data
        strSQLVehicle = " SELECT [RLF Data].MiddleLink, [RLF Middle].TopLink "
        strSQLVehicle = strSQLVehicle & " FROM [RLF Top] INNER JOIN ([RLF Middle] INNER JOIN [RLF Data] ON [RLF Middle].MiddleID = [RLF Data].MiddleLink) ON [RLF Top].RegNumberID = [RLF Middle].TopLink "
        strSQLVehicle = strSQLVehicle & " WHERE [RLF Middle].TopLink = " & lngRegNumberID
        strSQLVehicle = strSQLVehicle & " AND [RLF Data].Date >= " & SQLDate(CalculationBegDate)
        strSQLVehicle = strSQLVehicle & " AND [RLF Data].Date <= " & SQLDate(CalculationEndDate)
        strSQLVehicle = strSQLVehicle & " GROUP BY [RLF Data].MiddleLink, [RLF Middle].TopLink;"
        
        Set rstVehicle = New ADODB.Recordset
        rstVehicle.CursorLocation = adUseClient
        rstVehicle.CacheSize = 30
        rstVehicle.Open strSQLVehicle, conConnection, adOpenStatic, adLockReadOnly, adCmdText
        '--------------------
        
        '--------------------
        ' Process vehicle Period trip log data
        If Not rstVehicle.EOF Then
               
            ' Once per every vehicle
            bOncePerVehicle = True
                           
            '------------------------------
            ' 1. Compare previous and current data

            
            lngMiddleIDPrev = 0: lngMiddleIDCurr = 0
            sngMilesPrev = 0: sngMilesCurr = 0
            sngFuelPrev = 0: sngFuelCurr = 0
            sngOilPrev = 0: sngOilCurr = 0
            bMilesMatch = False: bFuelMatch = False: bOilMatch = 0
                        
            ' Check Previous and current odometer & fuel balance
            If Not CompareCurrentAndPreviousFuelBalance(conConnection, _
                                                        lngRegNumberID, _
                                                        CalculationBegDate, _
                                                        CalculationEndDate, _
                                                        lngMiddleIDPrev, _
                                                        lngMiddleIDCurr, _
                                                        sngMilesPrev, _
                                                        sngMilesCurr, _
                                                        sngFuelPrev, _
                                                        sngFuelCurr, _
                                                        sngOilPrev, _
                                                        sngOilCurr, _
                                                        bMilesMatch, _
                                                        bFuelMatch, _
                                                        bOilMatch) Then
                                                        
                                                        
                    strEvent = strRegNumber & ": " & Msg("Sequence", "Ïîñëåäîâàòåëíîñò", LAN10_BG_Bulgarian)
                   
                    Dim dtClosingPeriod As Date
                    ' Go to previous period
                    dtClosingPeriod = DateAdd("m", -1, CDate(CalculationBegDate))
                                                        
                    If Not bMilesMatch Then
                    
                        strEventDetails = Msg("Odometer", "Êèëîìåòðàæ", LAN10_BG_Bulgarian) & ": " & _
                                          Msg("Closing", "Êðàéíî", LAN10_BG_Bulgarian) & " (" & Format(dtClosingPeriod, "yyyy") & "/" & Format(dtClosingPeriod, "mm") & "): " & sngMilesPrev & ", " & _
                                          Msg("Opening", "Íà÷àëíî", LAN10_BG_Bulgarian) & " (" & Format(CalculationBegDate, "yyyy") & "/" & Format(CalculationBegDate, "mm") & "): " & sngMilesCurr & "."
                        
                        If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT3_ATTNRECOMMENDED, CAT2_ODOMETER, 1, 1) Then
                        
                            Call StatusMeter.AddInfo("Attention", strRegNumber & ": " & strEventDetails)
                                                    
                        End If
                        
                    End If
                    
                    If Not bFuelMatch Then
                                                               
                       strEventDetails = Msg("Fuel balance", "Ãîðèâî ñàëäî", LAN10_BG_Bulgarian) & ": " & _
                                         Msg("Closing", "Êðàéíî", LAN10_BG_Bulgarian) & " (" & Format(dtClosingPeriod, "yyyy") & "/" & Format(dtClosingPeriod, "mm") & "): " & Format(sngFuelPrev, "#0.00") & ", " & _
                                         Msg("Opening", "Íà÷àëíî", LAN10_BG_Bulgarian) & " (" & Format(CalculationBegDate, "yyyy") & "/" & Format(CalculationBegDate, "mm") & "): " & Format(sngFuelCurr, "#0.00") & "."
                       
                       If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT3_ATTNRECOMMENDED, CAT3_Fuel, 1, 1) Then
                       
                           Call StatusMeter.AddInfo("Attention", strRegNumber & ": " & strEventDetails)
                                                   
                       End If
                       
                    End If
                    
                    If Not bOilMatch Then
                    
                       strEventDetails = Msg("Oil balance", "Ìàñëî ñàëäî", LAN10_BG_Bulgarian) & ": " & _
                                         Msg("Closing", "Êðàéíî", LAN10_BG_Bulgarian) & " (" & Format(dtClosingPeriod, "yyyy") & "/" & Format(dtClosingPeriod, "mm") & "): " & Format(sngOilPrev, "#0.00") & ", " & _
                                         Msg("Opening", "Íà÷àëíî", LAN10_BG_Bulgarian) & " (" & Format(CalculationBegDate, "yyyy") & "/" & Format(CalculationBegDate, "mm") & "): " & Format(sngOilCurr, "#0.00") & "."
                       
                       If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT3_ATTNRECOMMENDED, CAT3_Fuel, 1, 1) Then
                       
                           Call StatusMeter.AddInfo("Attention", strRegNumber & ": " & strEventDetails)
                                                   
                       End If
                    
                    End If
                    
            End If
            ' Check Previous and current odometer & fuel balance
            '------------------------------
                
            '-------------------------------
            ' FuelName
            If lngFuelID <> 1 Then
            '
            Else
                ''lngFuelType <> GetFuelID("FuelBenzin") And _
                ''lngFuelType <> GetFuelID("FuelDiezel") And _
                ''lngFuelType <> GetFuelID("FuelLPG") Then
                
                strEvent = strRegNumber & ": " & _
                           Msg("Setting", "Íàñòðîéêà", LAN10_BG_Bulgarian) & ": " & _
                           Msg("Fuel type", "Âèä ãîðèâî", LAN10_BG_Bulgarian) & " " & _
                           Msg("not set", "íå å óêàçàíî", LAN10_BG_Bulgarian) & "."
                
                strEventDetails = Msg("Period", "Ïåðèîä", LAN10_BG_Bulgarian) & ": " & Format(CalculationBegDate, "yyyy") & "/" & Format(CalculationBegDate, "mm")
                
                If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT3_ATTNRECOMMENDED, CAT3_Fuel, 1, 1) Then
                    Call StatusMeter.AddInfo("Attention", strEvent)
                End If
                
            End If
            ' FuelName
            '-------------------------------
            
            '------------------------------
            ' Check Highway drive fuel consumption settings
            If sngFuelConsumptionHighway <> 0 Then
            
                Else
        
                ' Fuel consumption Highway is zero
                strEvent = strRegNumber & ": " & _
                           Msg("Setting", "Íàñòðîéêà", LAN10_BG_Bulgarian) & ": " & _
                           Msg("Highway drive", "Øîñåéíè", LAN10_BG_Bulgarian) & " " & _
                           Msg("reference fuel consumption", "íîðìåí ðàçõîä ãîðèâî", LAN10_BG_Bulgarian) & " " & _
                           Msg("is zero", "å íóëà", LAN10_BG_Bulgarian) & "."
                
                strEventDetails = strEventDetails = Msg("Period", "Ïåðèîä", LAN10_BG_Bulgarian) & ": " & Format(CalculationBegDate, "yyyy") & "/" & Format(CalculationBegDate, "mm")
                
                If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT4_ATTNIMPORTANT, CAT3_Fuel, 1, 1) Then
                    Call StatusMeter.AddInfo("Attention", strEvent)
                End If
            
            End If
            ' Check Highway drive fuel consumption settings
            '------------------------------
                    
            '------------------------------
            ' Check Zero fuel tank capacity
            If sngFuelTankCapacity <> 0 Then
            
                Else
            
                strEvent = strRegNumber & ": " & _
                           Msg("Setting", "Íàñòðîéêà", LAN10_BG_Bulgarian) & ": " & _
                           Msg("Fuel tank", "Ðåçåðâîàð", LAN10_BG_Bulgarian) & " " & _
                           Msg("capacity", "êàïàöèòåò", LAN10_BG_Bulgarian) & " " & _
                           Msg("is zero", "å íóëà", LAN10_BG_Bulgarian) & "."
                
                strEventDetails = Msg("Period", "Ïåðèîä", LAN10_BG_Bulgarian) & ": " & Format(CalculationBegDate, "yyyy") & "/" & Format(CalculationBegDate, "mm")
                
                If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT4_ATTNIMPORTANT, CAT3_Fuel, 1, 1) Then
                    Call StatusMeter.AddInfo("Attention", strEvent)
                End If
                
            End If
            ' Check Zero fuel tank capacity
            '------------------------------
            
            '------------------------------
            ' Check CityDrive/FuelConsumptionCity, Courses/DumpBodyLifting
            Dim lngCourses As Long
            Dim sngCityDrive As Single
            ' Check if Fuel references exists

            If IsFuelRefsUsed(conConnection, lngRegNumberID, CalculationBegDate, lngCourses, sngCityDrive) Then
            
                ' Non Zero City Drive
                ' Zero fuel consumption norm city
                If CBool(sngCityDrive) And _
                         sngFuelConsumptionCity = 0 Then
                
                    ' Used but ref is missing
                    strEvent = strRegNumber & ": " & _
                               Msg("Setting", "Íàñòðîéêà", LAN10_BG_Bulgarian) & ": " & _
                               Msg("City drive", "Ãðàäñêî øîôèðàíå", LAN10_BG_Bulgarian) & " " & _
                               Msg("reference fuel consumption", "íîðìåí ðàçõîä ãîðèâî", LAN10_BG_Bulgarian) & " " & _
                               Msg("is zero", "å íóëà", LAN10_BG_Bulgarian) & "."
                                        
                    
                    ''strEventDetails = rst2!Date & " " & _
                    ''                  Msg("City drive", "Ãðàäñêî øîôèðàíå", LAN10_BG_Bulgarian) & " " & _
                    ''                  Msg("reference fuel consumption", "íîðìåí ðàçõîä ãîðèâî", LAN10_BG_Bulgarian) & " " & _
                    ''                  Msg("is zero", "å íóëà", LAN10_BG_Bulgarian)
                                      
                    strEventDetails = Msg("Period", "Ïåðèîä", LAN10_BG_Bulgarian) & ": " & Format(CalculationBegDate, "yyyy") & "/" & Format(CalculationBegDate, "mm")
                    
                    If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT3_ATTNRECOMMENDED, CAT3_Fuel, 1, 1) Then
                        Call StatusMeter.AddInfo("Attention", strEvent)
                    End If
                                
                ElseIf Not CBool(sngCityDrive) And _
                                 sngFuelConsumptionCity > 0 Then
            
                ' Zero City Drive
                ' Non Zero fuel consumption
                    
                    strEvent = strRegNumber & ": " & _
                               Msg("City drive", "Ãðàäñêî øîôèðàíå", LAN10_BG_Bulgarian) & " " & _
                               Msg("reference fuel consumption", "íîðìåí ðàçõîä ãîðèâî", LAN10_BG_Bulgarian) & " " & _
                               Msg("is not used", "íå ñå èçïîëçâà", LAN10_BG_Bulgarian) & "."
                    
                    ''strEventDetails = rst2!Date & " " & _
                    ''                  Msg("City drive", "Ãðàäñêî øîôèðàíå", LAN10_BG_Bulgarian) & " " & _
                    ''                  Msg("reference fuel consumption", "íîðìåí ðàçõîä ãîðèâî", LAN10_BG_Bulgarian) & " " & _
                    ''                  Msg("is not used", "íå ñå èçïîëçâà", LAN10_BG_Bulgarian)
                                      
                    strEventDetails = Msg("Period", "Ïåðèîä", LAN10_BG_Bulgarian) & ": " & Format(CalculationBegDate, "yyyy") & "/" & Format(CalculationBegDate, "mm")
                                      
                    If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT3_ATTNRECOMMENDED, CAT3_Fuel, 1, 1) Then
                        Call StatusMeter.AddInfo("Attention", strEvent)
                    End If
                    
                End If
                ' City Drive ends
                
                ' Dump Body Liftings
                If CBool(lngCourses) And _
                         sngOneCourse = 0 Then
                    
                    ' Non DumpBody liftings
                    ' Zero fuel consumption dump body lifting
                    strEvent = strRegNumber & ": " & _
                               Msg("Setting", "Íàñòðîéêà", LAN10_BG_Bulgarian) & ": " & _
                               Msg("Dump body lifting", "Âäèãàíå êîø", LAN10_BG_Bulgarian) & " " & _
                               Msg("reference fuel consumption", "íîðìåí ðàçõîä ãîðèâî", LAN10_BG_Bulgarian) & " " & _
                               Msg("is zero", "å íóëà", LAN10_BG_Bulgarian) & "."
                                            
                    ''strEventDetails = rst2!Date & ": " & Format(sngOneCourse, "#0.000")
                    strEventDetails = Msg("Period", "Ïåðèîä", LAN10_BG_Bulgarian) & ": " & Format(CalculationBegDate, "yyyy") & "/" & Format(CalculationBegDate, "mm") & ": " & Format(sngOneCourse, "#0.000")
                    
                    If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT3_ATTNRECOMMENDED, CAT3_Fuel, 1, 1) Then
                        Call StatusMeter.AddInfo("Attention", strEvent)
                    End If
                    
                ElseIf Not CBool(lngCourses) And _
                                 sngOneCourse > 0 Then
                    ' Zero Dump Body liftings
                    ' Non Zero fuel consumption dump body lifting
                    
                    strEvent = strRegNumber & ": " & _
                               Msg("Dump body lifting", "Âäèãàíå êîø", LAN10_BG_Bulgarian) & " " & _
                               Msg("reference fuel consumption", "íîðìåí ðàçõîä ãîðèâî", LAN10_BG_Bulgarian) & " " & _
                               Msg("is not used", "íå ñå èçïîëçâà", LAN10_BG_Bulgarian) & "."
                                            
                    ''strEventDetails = rst2!Date & ": " & Format(sngOneCourse, "#0.000")
                    strEventDetails = Msg("Period", "Ïåðèîä", LAN10_BG_Bulgarian) & ": " & Format(CalculationBegDate, "yyyy") & "/" & Format(CalculationBegDate, "mm") & ": " & Format(sngOneCourse, "#0.000")
                    
                    If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT3_ATTNRECOMMENDED, CAT3_Fuel, 1, 1) Then
                        Call StatusMeter.AddInfo("Attention", strEvent)
                    End If
                        
                End If
                ' Dump Body Liftings ends
            
            End If
            ' Check CityDrive/FuelConsumptionCity, Courses/DumpBodyLifting
            '------------------------------------------
            
            '------------------------------------------
            ' Alerts related to fuel consumption ratios settings
            '------------------------------------------
            ' Fuel norm ratios
            If sngFuelConsumptionHighway > 0 Then
                        
                strEvent = strRegNumber & ": " & _
                           Msg("Settings", "Íàñòðîéêè", LAN10_BG_Bulgarian) & ": " & _
                           Msg("reference fuel required", "íîðìåí ðàçõîä ãîðèâî", LAN10_BG_Bulgarian) & " " & _
                           Msg("ratio", "ñúîòíîøåíèe", LAN10_BG_Bulgarian) & "."
                
                ' City to highway
                If 100 * (sngFuelConsumptionCity / sngFuelConsumptionHighway) > 15 Then
                                        
                    ''strEventDetails = rst2!Date & ": " & Format(sngFuelConsumptionCity / sngFuelConsumptionHighway, "#0.0%") & " " & _
                    ''Msg("City drive") & ":" & sngFuelConsumptionCity & " " & Msg("Highway drive") & ":" & sngFuelConsumptionHighway
                    
                    strEventDetails = Msg("Period", "Ïåðèîä", LAN10_BG_Bulgarian) & ": " & Format(CalculationBegDate, "yyyy") & "/" & Format(CalculationBegDate, "mm") & ": " & _
                                        Format(sngFuelConsumptionCity / sngFuelConsumptionHighway, "#0.0%") & " " & _
                                        Msg("City drive", "Ãðàäñêî øîôèðàíå", LAN10_BG_Bulgarian) & ":" & sngFuelConsumptionCity & " " & Msg("Highway drive", "Øîñåéíè", LAN10_BG_Bulgarian) & ":" & sngFuelConsumptionHighway
                    
                     
                    If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT3_ATTNRECOMMENDED, CAT3_Fuel, 1) Then
                        Call StatusMeter.AddInfo("Attention", strEvent & " " & Format(sngFuelConsumptionCity / sngFuelConsumptionHighway, "#0.0%"))
                    End If
                    
                ElseIf 100 * (sngFuelConsumptionCity / sngFuelConsumptionHighway) > 5 Then
                                        
                    strEventDetails = Msg("Period", "Ïåðèîä", LAN10_BG_Bulgarian) & ": " & Format(CalculationBegDate, "yyyy") & "/" & Format(CalculationBegDate, "mm") & ": " & _
                    Format(sngFuelConsumptionCity / sngFuelConsumptionHighway, "#0.0%") & " " & _
                    Msg("City drive", "Ãðàäñêî øîôèðàíå", LAN10_BG_Bulgarian) & ":" & sngFuelConsumptionCity & " " & Msg("Highway drive", "Øîñåéíè", LAN10_BG_Bulgarian) & ":" & sngFuelConsumptionHighway
                     
                    If sysEvents.AddEvent(strEvent, strEventDetails, "Info", ALERT2_Warning, CAT3_Fuel, 1) Then
                        Call StatusMeter.AddInfo("Info", strEvent & " " & Format(sngFuelConsumptionCity / sngFuelConsumptionHighway, "#0.0%"))
                    End If
                                                  
                End If
                
                ' Hilly to highway
                If 100 * (sngFuelConsumptionHillyTerrain / sngFuelConsumptionHighway) > 20 Then
                                        
                    strEventDetails = Msg("Period", "Ïåðèîä", LAN10_BG_Bulgarian) & ": " & Format(CalculationBegDate, "yyyy") & "/" & Format(CalculationBegDate, "mm") & ": " & _
                    Format(sngFuelConsumptionHillyTerrain / sngFuelConsumptionHighway, "#0.0%") & " " & _
                    Msg("Hilly drive") & ":" & sngFuelConsumptionHillyTerrain & " " & Msg("Highway drive", "Øîñåéíè", LAN10_BG_Bulgarian) & ":" & sngFuelConsumptionHighway
                     
                    If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT3_ATTNRECOMMENDED, CAT3_Fuel, 1) Then
                        Call StatusMeter.AddInfo("Attention", strEvent & " " & Format(sngFuelConsumptionHillyTerrain / sngFuelConsumptionHighway, "#0.0%"))
                    End If
                    
                ElseIf 100 * (sngFuelConsumptionHillyTerrain / sngFuelConsumptionHighway) > 10 Then
                                        
                    strEventDetails = Msg("Period", "Ïåðèîä", LAN10_BG_Bulgarian) & ": " & Format(CalculationBegDate, "yyyy") & "/" & Format(CalculationBegDate, "mm") & ": " & _
                    Format(sngFuelConsumptionHillyTerrain / sngFuelConsumptionHighway, "#0.0%") & " " & _
                    Msg("Hilly drive") & ":" & sngFuelConsumptionHillyTerrain & " " & Msg("Highway drive", "Øîñåéíè", LAN10_BG_Bulgarian) & ":" & sngFuelConsumptionHighway
                     
                    If sysEvents.AddEvent(strEvent, strEventDetails, "Info", ALERT2_Warning, CAT3_Fuel, 1) Then
                        Call StatusMeter.AddInfo("Info", strEvent & " " & Format(sngFuelConsumptionHillyTerrain / sngFuelConsumptionHighway, "#0.0%"))
                    End If
                                                  
                End If
                 
                ' Mountain to highway
                If 100 * (sngFuelConsumptionMountainTerrain / sngFuelConsumptionHighway) > 20 Then
                                        
                    strEventDetails = Msg("Period", "Ïåðèîä", LAN10_BG_Bulgarian) & ": " & Format(CalculationBegDate, "yyyy") & "/" & Format(CalculationBegDate, "mm") & ": " & _
                    Format(sngFuelConsumptionMountainTerrain / sngFuelConsumptionHighway, "#0.0%") & " " & _
                    Msg("Mountain drive") & ":" & sngFuelConsumptionMountainTerrain & " " & Msg("Highway drive", "Øîñåéíè", LAN10_BG_Bulgarian) & ":" & sngFuelConsumptionHighway
                     
                    If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT3_ATTNRECOMMENDED, CAT3_Fuel, 1) Then
                        Call StatusMeter.AddInfo("Attention", strEvent & " " & Format(sngFuelConsumptionMountainTerrain / sngFuelConsumptionHighway, "#0.0%"))
                    End If
                    
                ElseIf 100 * (sngFuelConsumptionMountainTerrain / sngFuelConsumptionHighway) > 10 Then
                                        
                    strEventDetails = Msg("Period", "Ïåðèîä", LAN10_BG_Bulgarian) & ": " & Format(CalculationBegDate, "yyyy") & "/" & Format(CalculationBegDate, "mm") & ": " & _
                    Format(sngFuelConsumptionMountainTerrain / sngFuelConsumptionHighway, "#0.0%") & " " & _
                    Msg("Mountain drive") & ":" & sngFuelConsumptionMountainTerrain & " " & Msg("Highway drive", "Øîñåéíè", LAN10_BG_Bulgarian) & ":" & sngFuelConsumptionHighway
                     
                    If sysEvents.AddEvent(strEvent, strEventDetails, "Info", ALERT2_Warning, CAT3_Fuel, 1) Then
                        Call StatusMeter.AddInfo("Info", strEvent & " " & Format(sngFuelConsumptionMountainTerrain / sngFuelConsumptionHighway, "#0.0%"))
                    End If
                                                  
                End If
                           
                ' Sites/Mining terrain to highway
                If 100 * (sngFuelConsumptionMiningTerrain / sngFuelConsumptionHighway) > 20 Then
                                        
                    strEventDetails = Msg("Period", "Ïåðèîä", LAN10_BG_Bulgarian) & ": " & Format(CalculationBegDate, "yyyy") & "/" & Format(CalculationBegDate, "mm") & ": " & _
                    Format(sngFuelConsumptionMiningTerrain / sngFuelConsumptionHighway, "#0.0%") & " " & _
                    Msg("Mining drive") & ":" & sngFuelConsumptionMiningTerrain & " " & Msg("Highway drive", "Øîñåéíè", LAN10_BG_Bulgarian) & ":" & sngFuelConsumptionHighway
                     
                    If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT3_ATTNRECOMMENDED, CAT3_Fuel, 1) Then
                        Call StatusMeter.AddInfo("Attention", strEvent & " " & Format(sngFuelConsumptionMiningTerrain / sngFuelConsumptionHighway, "#0.0%"))
                    End If
                    
                ElseIf 100 * (sngFuelConsumptionMiningTerrain / sngFuelConsumptionHighway) > 10 Then
                                        
                    strEventDetails = Msg("Period", "Ïåðèîä", LAN10_BG_Bulgarian) & ": " & Format(CalculationBegDate, "yyyy") & "/" & Format(CalculationBegDate, "mm") & ": " & _
                    Format(sngFuelConsumptionMiningTerrain / sngFuelConsumptionHighway, "#0.0%") & " " & _
                    Msg("Mining drive") & ":" & sngFuelConsumptionMiningTerrain & " " & Msg("Highway drive", "Øîñåéíè", LAN10_BG_Bulgarian) & ":" & sngFuelConsumptionHighway
                     
                    If sysEvents.AddEvent(strEvent, strEventDetails, "Info", ALERT2_Warning, CAT3_Fuel, 1) Then
                        Call StatusMeter.AddInfo("Info", strEvent & " " & Format(sngFuelConsumptionMiningTerrain / sngFuelConsumptionHighway, "#0.0%"))
                    End If
                                                  
                End If
            
            End If
            ' Alerts related to fuel consumption ratios settings end
            ' -------------------------------
                                
            ' -------------------------------
            ' >> Amortization/Depreciation. Check ONLY
            
            ' Assume zero
            dblDailyAmortizationCost = 0
            
            intArgs = MyDictionary.SelectFields("VehiclePurchaseCost,VehicleDateOfPurchase,VehicleDepreciationPeriod,VehicleWorkDaysInMonth,TrailerDailyAmortizationCost", _
                                       "Trucks techdata", _
                                        "ID=" & lngRegNumberID)
            ' Amortization parameters
            If CBool(intArgs) Then
                                           
                ReDim strgetOpenArg(intArgs)
                strgetOpenArg = Split(MyDictionary.Items, Chr$(13))
                
                dblVehiclePurchaseCost = Format(CDbl(strgetOpenArg(0)), "#0.00")
                dtVehicleDateOfPurchase = Format(CDate(strgetOpenArg(1)), "dd/mm/yyyy")
                sngVehicleDepreciationPeriod = Format(CSng(strgetOpenArg(2)), "#0.00")
                sngVehicleWorkDaysInMonth = Format(CSng(strgetOpenArg(3)), "#0.00")
                dblTrailerDailyAmortizationCost = Format(CDbl(strgetOpenArg(4)), "#0.00")
                                      
                ' Check purchase cost
                If dblVehiclePurchaseCost <= 0 Then
                                       
                    ' Missing Purchase cost
                    strEvent = strRegNumber & ": " & _
                               Msg("Setting", "Íàñòðîéêà", LAN10_BG_Bulgarian) & ": " & _
                               Msg("Purchase cost", "Öåíà ïðèäîáèâàíå", LAN10_BG_Bulgarian) & " " & Msg("is zero", "å íóëà", LAN10_BG_Bulgarian)
                    
                    If sysEvents.AddEvent(strEvent, , "Attention", ALERT4_ATTNIMPORTANT, CAT10_BUDGET, 1) Then
                        Call StatusMeter.AddInfo("Attention", strEvent)
                    End If
                    
                    ' Skip Calculation
                    ' Indicate not applicable
                    Call AmortizationNotApplicable.AddItem(strRegNumber)
            
                Else
                                 
                    lngDays = DateDiff("d", dtVehicleDateOfPurchase, CDate(CalculationBegDate))
                            
                    If lngDays >= 0 Then
                        ' Current date is after the purchase date
                    
                        ' Calculate end date
                        dtTruckWarrantyExpireDate = ExpireDate("d", sngVehicleDepreciationPeriod * sngVehicleWorkDaysInMonth, dtVehicleDateOfPurchase)
                    
                        ' Compare current date and ExpireDate
                        lngDays = DateDiff("d", CDate(CalculationBegDate), dtTruckWarrantyExpireDate)
                    
                        If lngDays > 0 Then
                        
                            ' Within the period limits
                            dblDailyAmortizationCost = DailyAmortizationCost(dblVehiclePurchaseCost, _
                                                                       dtVehicleDateOfPurchase, _
                                                                       sngVehicleDepreciationPeriod, _
                                                                       sngVehicleWorkDaysInMonth, _
                                                                       dblTrailerDailyAmortizationCost)
                                                                       
                            ' One time per vehicle
                            If AssignedDepreciationInMonthConn(conConnection, lngRegNumberID, CalculationBegDate, CalculationEndDate) > dblDailyAmortizationCost * sngVehicleWorkDaysInMonth Then
                                                                   
                                strEvent = strRegNumber & ": " & _
                                            Msg("Depreciation", "Èçõàáÿâàíå", LAN10_BG_Bulgarian)
                                
                                strEventDetails = Msg("Distributed", "Ðàçïðåäåëåíî", LAN10_BG_Bulgarian) & ": " & _
                                                  Format(AssignedDepreciationInMonthConn(conConnection, lngRegNumberID, CalculationBegDate, CalculationEndDate), "#0.00") & " " & _
                                                  Msg("Planned", "Ïëàíèðàíî", LAN10_BG_Bulgarian) & ": " & _
                                                  Format(dblDailyAmortizationCost * sngVehicleWorkDaysInMonth, "#0.00")
                                                                    
                                If sysEvents.AddEvent(strEvent, strEventDetails, "Info", ALERT2_Warning, CAT10_BUDGET, 1, 1) Then
                                    Call StatusMeter.AddInfo("Info", strRegNumber & ": " & Msg("Depreciation", "Èçõàáÿâàíå", LAN10_BG_Bulgarian) & " " & strEventDetails)
                                End If
                                                                   
                            End If
                                                                       
                                                                       
                            sngActualWorkDaysInMonth = CountWorkDaysInMonthConn(conConnection, lngRegNumberID, CalculationBegDate, CalculationEndDate)
                            
                            ' WorkDays exceed planned work dsys
                            If sngActualWorkDaysInMonth > sngVehicleWorkDaysInMonth Then
                            
                                ' Reduce daily depreciacion spread
                                dblDailyAmortizationCost = dblDailyAmortizationCost * sngVehicleWorkDaysInMonth / sngActualWorkDaysInMonth
                                
                                strEvent = strRegNumber & ": " & _
                                Msg("Setting", "Íàñòðîéêà", LAN10_BG_Bulgarian) & ": " & _
                                Msg("Reduced daily depreciation", "Ðåäóöèðàíî äíåâíî èçõàáÿâàíå", LAN10_BG_Bulgarian)
                                
                                strEventDetails = Format(dblDailyAmortizationCost, "#0.00")
                            
                                If sysEvents.AddEvent(strEvent, strEventDetails, "Info", ALERT1_Info, CAT10_BUDGET, 1, 1) Then
                                    Call StatusMeter.AddInfo("Info", strEvent & " " & strEventDetails)
                                End If
                             
                            Else
                            
                                ' No reduction of daily depreciation spread
                                strEvent = strRegNumber & ": " & _
                                Msg("Setting", "Íàñòðîéêà", LAN10_BG_Bulgarian) & ": " & _
                                Msg("Daily depreciation", "Äíåâíî èçõàáÿâàíå", LAN10_BG_Bulgarian)
                                
                                strEventDetails = strEvent & ": " & Format(dblDailyAmortizationCost, "#0.00")
                            
                                If sysEvents.AddEvent(strEvent, strEventDetails, "Info", ALERT1_Info, CAT10_BUDGET, 1, 1) Then
                                    Call StatusMeter.AddInfo("Info", strEventDetails)
                                End If
                                
                            End If
                                
                        
                        Else
                        
                            ' Depreciation period expired
                            strEvent = strRegNumber & ": " & _
                                   Msg("Setting", "Íàñòðîéêà", LAN10_BG_Bulgarian) & ": " & _
                                   Msg("Depreciation period", "Èçõàáÿâàíå ïåðèîä", LAN10_BG_Bulgarian) & " " & _
                                   Msg("expired", "èçòåêúë", LAN10_BG_Bulgarian) & "."
                                   
                            strEventDetails = CDate(CalculationBegDate) & "."
                        
                            If sysEvents.AddEvent(strEvent, strEventDetails, "Info", ALERT2_Warning, CAT10_BUDGET, 1) Then
                                Call StatusMeter.AddInfo("Info", strEvent)
                            End If
                        
                            ' Skip Calculation
                            Call AmortizationNotApplicable.AddItem(strRegNumber)
                        
                        End If
                        
                    Else
                    
                        ' Current date is before the purchase date but Amortization could be applicable
                        strEvent = strRegNumber & ": " & _
                               Msg("Setting", "Íàñòðîéêà", LAN10_BG_Bulgarian) & ": " & _
                               Msg("Depreciation period", "Èçõàáÿâàíå ïåðèîä", LAN10_BG_Bulgarian) & " " & _
                               Msg("not started", "íå å çàïî÷íàë", LAN10_BG_Bulgarian) & "."
                               
                        strEventDetails = CDate(CalculationBegDate) & "."
                    
                        If sysEvents.AddEvent(strEvent, strEventDetails, "Info", ALERT1_Info, CAT10_BUDGET, 1) Then
                            Call StatusMeter.AddInfo("Info", strEvent)
                        End If
                    
                    End If
                
                End If
                ' Check purchase cost
                
            End If
            ' Amortization/Depreciation. Check ONLY <<
            
            '---------------------------
            
            ' --------------------------
            ' Periodic Events
            Dim strSQLPeriodicEvents As String
            Dim rstPeriodicEvents As ADODB.Recordset
            
            strSQLPeriodicEvents = "SELECT [RLF DataSub3].SubID3, PeriodicEvents.PeriodicEventName, [RLF DataSub3].PeriodicSettingID, PeriodicSettings.PeriodicSettingMonths, PeriodicSettings.PeriodicSettingDistance, [RLF DataSub3].StartDate, [RLF DataSub3].StartDistance, [RLF DataSub3].EndDate, [RLF DataSub3].EndDistance,PeriodicEvents.PeriodicEventDaysDiff, PeriodicEvents.PeriodicEventDistanceDiff"
            strSQLPeriodicEvents = strSQLPeriodicEvents & " FROM ([RLF Top] INNER JOIN ([RLF Middle] INNER JOIN [RLF Data] ON [RLF Middle].MiddleID = [RLF Data].MiddleLink) ON [RLF Top].RegNumberID = [RLF Middle].TopLink) INNER JOIN (PeriodicSettings INNER JOIN (PeriodicEvents INNER JOIN [RLF DataSub3] ON PeriodicEvents.PeriodicEventID = [RLF DataSub3].PeriodicEventID) ON PeriodicSettings.PeriodicSettingID = [RLF DataSub3].PeriodicSettingID) ON [RLF Data].DataID = [RLF DataSub3].DataLink3"
            strSQLPeriodicEvents = strSQLPeriodicEvents & " WHERE [RLF Top].RegNumberID = " & lngRegNumberID
            strSQLPeriodicEvents = strSQLPeriodicEvents & " GROUP BY [RLF DataSub3].SubID3, PeriodicEvents.PeriodicEventName, [RLF DataSub3].PeriodicSettingID, PeriodicSettings.PeriodicSettingMonths, PeriodicSettings.PeriodicSettingDistance, [RLF DataSub3].StartDate, [RLF DataSub3].StartDistance, [RLF DataSub3].EndDate, [RLF DataSub3].EndDistance, PeriodicEvents.PeriodicEventDaysDiff, PeriodicEvents.PeriodicEventDistanceDiff;"
            
            Set rstPeriodicEvents = New ADODB.Recordset
            rstPeriodicEvents.CursorLocation = adUseClient
            rstPeriodicEvents.Open strSQLPeriodicEvents, conConnection, adOpenStatic, adLockOptimistic, adCmdText
                                
            Do While Not rstPeriodicEvents.EOF
                                
                ' rstPeriodicEvents(0)=SubID3
                ' rstPeriodicEvents(1)=PeriodicEventName
                ' rstPeriodicEvents(2)=PeriodicSettingID
                ' rstPeriodicEvents(3)=PeriodicSettingMonths
                ' rstPeriodicEvents(4)=PeriodicSettingDistance
                ' rstPeriodicEvents(5)=StartDate
                ' rstPeriodicEvents(6)=StartDistance
                ' rstPeriodicEvents(7)=EndDate
                ' rstPeriodicEvents(8)=EndDistance
                ' rstPeriodicEvents(9)=PeriodicEventDaysDiff
                ' rstPeriodicEvents(10)=PeriodicEventDistanceDiff
                                        
                ' Time or distance based periodic events
                ' 1. Time based periodic event
                
                ' Recalculate End Date
                Dim bytePeriodicSettingMonths As Byte
                Dim lngPeriodicSettingDays As Long
                
                ' PeriodicSettingMonths
                bytePeriodicSettingMonths = rstPeriodicEvents(3)
                
                If bytePeriodicSettingMonths > 0 Then
                
                    ' End Date = Months + StartDate
                    rstPeriodicEvents(7) = Format(DateAdd("m", bytePeriodicSettingMonths, rstPeriodicEvents(5)), "dd/mm/yyyy")
                    
                    ' Recalculate Days Difference (remaining, exceeded)
                    ' DaysDiff = CurrentDate - EndDate
                    rstPeriodicEvents(9) = DateDiff("d", Now, rstPeriodicEvents(7))
                    ' Convert monthly settings into days
                    lngPeriodicSettingDays = CLng(365.25 / 12 * bytePeriodicSettingMonths)
                    ' Set Distance difference to zero
                    rstPeriodicEvents(10) = 0
            
                End If
                
                ' Or
                
                ' 2. Distance based periodic event
                ''Dim PeriodicSettingDistance As Long
            
                ' PeriodicSettingDistance
                ''PeriodicSettingDistance = rstPeriodicEvents(4)
                
                If rstPeriodicEvents(4) > 0 Then
                
                    ' EndDistance =  StartDistance + PeriodicSettingDistance
                    rstPeriodicEvents(8) = rstPeriodicEvents(6) + rstPeriodicEvents(4)
                    
                    Dim lngDistance As Long
                    
                    ' Get Distance from the Starting date
                    lngDistance = GetDistanceFromDate(lngRegNumberID, rstPeriodicEvents(5))
                    
                    ' Recalculate Distance Difference (remaining, exceeded)
                    ' PeriodicEventDistanceDiff=EndDistance - Distance
                    rstPeriodicEvents(10) = rstPeriodicEvents(8) - lngDistance
                    ' Set Days difference to zero
                    rstPeriodicEvents(9) = 0
                               
                End If
            
                ' Display
                ' 1. Time based periodic event
                ' PeriodicSettingMonths
                If bytePeriodicSettingMonths > 0 Then
                
                    If rstPeriodicEvents(3) > 0 Then
                    
                        strEvent = strRegNumber & ": " & _
                           Msg("Event", "Ñúáèòèå", LAN10_BG_Bulgarian) & ": " & _
                           rstPeriodicEvents(1) & "."
                           
                        Dim sngTimeResourceInfo As Single
                        sngTimeResourceInfo = rstPeriodicEvents(9) / lngPeriodicSettingDays
                           
                        ' Days left
                        strEventDetails = Msg("Date") & ": " & rstPeriodicEvents(5) & ", " & _
                                Msg("Odometer", "Êèëîìåòðàæ", LAN10_BG_Bulgarian) & ": " & rstPeriodicEvents(6) & ", " & _
                                Msg("Planned", "Ïëàíèðàíî", LAN10_BG_Bulgarian) & ": " & lngPeriodicSettingDays & ", " & _
                                Msg("resource", "ðåñóðñ", LAN10_BG_Bulgarian) & ": " & rstPeriodicEvents(9) & _
                                " (" & Format(100 * sngTimeResourceInfo, "#0.0") & "%)"
                        
                    
                        ' Days
                        ''strEvent = rstPeriodicEvents(5) & " " & strRegNumber & " " & rstPeriodicEvents(1) & " " & _
                        ''Msg("resource", "ðåñóðñ", LAN10_BG_Bulgarian) & " " & rstPeriodicEvents(9) & _
                        ''" (" & Format(100 * rstPeriodicEvents(9) / lngPeriodicSettingDays, "#0.0") & "%)"
            
                        If sngTimeResourceInfo > 0 And sngTimeResourceInfo > 0.1 Then
                            'No Info
                        
                        ElseIf sngTimeResourceInfo > 0 And sngTimeResourceInfo > 0.05 Then
                            ' Info only
                            If sysEvents.AddEvent(strEvent, strEventDetails, "Info", ALERT1_Info, CAT11_MAINTENANCE, 1, 1) Then
                                Call StatusMeter.AddInfo("Info", strEvent)
                            End If
                        Else
                            ' If neither of the above conditions is true
                            If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT3_ATTNRECOMMENDED, CAT11_MAINTENANCE, 1, 1) Then
                                Call StatusMeter.AddInfo("Attention", strEvent)
                            End If
                        
                        End If
                        
                    End If
                    
                End If
                
                ' 2. Distance based periodic event
                ' If PeriodicSettingDistance > 0 Then
                    
                If rstPeriodicEvents(4) > 0 Then
                                                   
                    strEvent = strRegNumber & ": " & _
                           Msg("Event", "Ñúáèòèå", LAN10_BG_Bulgarian) & ": " & _
                           rstPeriodicEvents(1) & "."
                    
                    Dim sngDistanceResourceInfo As Single
                    sngDistanceResourceInfo = rstPeriodicEvents(10) / rstPeriodicEvents(4)
                    
                    strEventDetails = Msg("Date") & ": " & rstPeriodicEvents(5) & ", " & _
                                    Msg("Odometer", "Êèëîìåòðàæ", LAN10_BG_Bulgarian) & ": " & rstPeriodicEvents(6) & ", " & _
                                    Msg("Planned", "Ïëàíèðàíî", LAN10_BG_Bulgarian) & ": " & rstPeriodicEvents(4) & ", " & _
                                    Msg("resource", "ðåñóðñ", LAN10_BG_Bulgarian) & ": " & rstPeriodicEvents(10) & _
                                    " (" & Format(100 * sngDistanceResourceInfo, "#0.0") & "%)"
                    
                    If sngDistanceResourceInfo > 0 And sngDistanceResourceInfo > 0.1 Then
                        ' No Info
                        ' If sysEvents.AddEvent(strEvent, strEventDetails, "Info", ALERT1_Info, CAT11_MAINTENANCE, 1, 1) Then
                        '   Call StatusMeter.AddInfo("Info", strEvent)
                        ' End If
                    ElseIf sngDistanceResourceInfo > 0 And sngDistanceResourceInfo > 0.05 Then
                        ' Info only
                        If sysEvents.AddEvent(strEvent, strEventDetails, "Info", ALERT1_Info, CAT11_MAINTENANCE, 1, 1) Then
                            Call StatusMeter.AddInfo("Info", strEvent)
                        End If
                    Else
                        ' If neither of the above conditions is true
                        If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT3_ATTNRECOMMENDED, CAT11_MAINTENANCE, 1, 1) Then
                            Call StatusMeter.AddInfo("Attention", strEvent)
                        End If
                    End If
                
                End If
                
                ' End If
                                
                rstPeriodicEvents.MoveNext
            
            Loop
            ' Periodic Events
            ' -------------------------------

            ' Once per vehicle section
            '-------------------------------
            
            strSQLTrips = "SELECT [RLF Middle].MiddleID, [RLF Middle].TopLink,[RLF Data].* "
            strSQLTrips = strSQLTrips & " FROM [RLF Top] INNER JOIN ([RLF Middle] INNER JOIN [RLF Data] ON [RLF Middle].MiddleID = [RLF Data].MiddleLink) ON [RLF Top].RegNumberID = [RLF Middle].TopLink "
            strSQLTrips = strSQLTrips & " WHERE [RLF Middle].TopLink = " & lngRegNumberID
            strSQLTrips = strSQLTrips & " AND [RLF Data].Date >= " & SQLDate(CalculationBegDate)
            strSQLTrips = strSQLTrips & " AND [RLF Data].Date <= " & SQLDate(CalculationEndDate)
            strSQLTrips = strSQLTrips & " ORDER BY [RLF Data].Date, [RLF Data].ShiftNumber, [RLF Data].Vehicle;"
                    
            Set rstTrips = New ADODB.Recordset
            rstTrips.CursorLocation = adUseClient
            rstTrips.CacheSize = 30
            rstTrips.Open strSQLTrips, conConnection, adOpenStatic, adLockOptimistic, adCmdText
                           
            '----------------------
            ' Trip Logs Loop
            If rstTrips.EOF Then
                ' No trips for this vehicle
            Else
            
                '-------------------
                ' 1. Copy initial trip data to [RLF Middle] table
                ' Make the last calculated [RLF Middle] fixed to [RLF Top]
                sngLastFuelStart = 0
                sngLastOilStart = 0
                sngLastFuelAdded = 0
                sngLastFuelEnd = 0
                sngLastOilAdded = 0
                sngLastOilEnd = 0
                
                ' Save Start of Trip parameters
''                lngMiddleID = MonthlyStatStart(conConnection, lngRegNumberID, rstTrips!MiddleLink, rstTrips!DataID, rstTrips!Date, rstTrips!FuelStart, rstTrips!OilStart, _
''                                                sysEvents.ALERT1_Info + sysEvents.ALERT2_Warning, sysEvents.ALERT3_Recommended + sysEvents.ALERT4_Important, sysEvents.ALERT4_Important + sysEvents.ALERT6_Urgent, _
''                                                Format(Date, "yyyy/MM/dd") & " " & Format(Time, "HH:mm") & ", " & curUser.LoginName)
''
''                strEvent = strRegNumber & ": " & Msg("Database consistency", "Ñúãëàñóâàíîñò äàííè", LAN10_BG_Bulgarian) & "."
''
''                If Not CBool(lngMiddleID) Then
''                    ' Failed
''                    strEventDetails = Msg("Failed to copy initial trip info", "Íå óñïÿ äà êîïèðà íà÷àëíèòå äàííè ïúòåí ëèñò", LAN10_BG_Bulgarian) & " " & _
''                                rstTrips!Date & " (" & rstTrips!TripDay & ") - " & rstTrips!DataID
''
''                    If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT4_ATTNIMPORTANT, CAT4_TRIPLOG, 1, 1) Then
''                        Call StatusMeter.AddInfo("Attention", strEvent & " " & rstTrips!Date & " (" & rstTrips!TripDay & ") - " & " " & rstTrips!DataID)
''                    End If
''
''                Else

                ' Success
                sngLastFuelStart = Format(rstTrips!FuelStart, "#0.000")
                sngLastOilStart = Format(rstTrips!OilStart, "#0.000")
                
                ' Odometer consistency
                ' From previous record.
                sngMilesOut = rstTrips!MilesOut ' Start of Odometer
                sngFuelEnd = rstTrips!FuelEnd   ' Fuel end
                
                ' 0205
                lngRegNumberIDFix = lngRegNumberID
                lngMiddleIDFix = rstTrips!MiddleLink
                lngDataIDFix = rstTrips!DataID
                dtDateFix = rstTrips!Date
                sngFuelStartFix = rstTrips!FuelStart
                sngOilStartFix = rstTrips!OilStart
                                                          
                If Not CBool(MonthlyStatStart(conConnection, lngRegNumberIDFix, lngMiddleIDFix, lngDataIDFix, dtDateFix, sngFuelStartFix, sngOilStartFix, _
                                sysEvents, _
                                Format(Date, "yyyy/MM/dd") & " " & Format(Time, "HH:mm") & ", " & curUser.LoginName)) Then
                                        
                
                    
                    ' Failure
                    strEvent = strRegNumber & ": " & Msg("Database consistency", "Ñúãëàñóâàíîñò äàííè", LAN10_BG_Bulgarian) & "."
                
                    ' Failed
                    strEventDetails = Msg("Failed to copy initial trip info", "Íå óñïÿ äà êîïèðà íà÷àëíèòå äàííè ïúòåí ëèñò", LAN10_BG_Bulgarian) & " " & _
                                rstTrips!Date & " (" & rstTrips!TripDay & ") - " & rstTrips!DataID
                
                    If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT4_ATTNIMPORTANT, CAT4_TRIPLOG, 1, 1) Then
                        Call StatusMeter.AddInfo("Attention", strEvent & " " & rstTrips!Date & " (" & rstTrips!TripDay & ") - " & " " & rstTrips!DataID)
                    End If
                
                Else
                
                    ' Success
                                
                End If
                                     

''                End If
                ' Copy Date, Initial Fuel and Oil to [RLF Middle] table
                '-------------------
            
                Do While Not rstTrips.EOF
                    
                    ' ---------------------
                    ' 1. Trip Log data check
                    Dim bInputTripLogDataCheck As Boolean
                    bInputTripLogDataCheck = True
                    
                    If bInputTripLogDataCheck Then

                        '-------------------------------
                        ' 1.1 Trip Logs, Date, Shift and Vehicle# duplication

                        vKey = strRegNumber & CStr(rstTrips!Date) & CStr(rstTrips!ShiftNumber) & CStr(rstTrips!Vehicle)
                        
                        If TripDateDuplicationList.Search(vKey) Then
                            ' Found
                            strEvent = strRegNumber & ": " & Msg("Trip duplication date, shift and vehicle", _
                                                            "Ïúòåí ëèñò äóáëèðàíå äàòà, ñìÿíà è íîìåð êîëà", LAN10_BG_Bulgarian)
                            
                            strEventDetails = rstTrips!Date & " " & rstTrips!ShiftNumber & " (" & rstTrips!Vehicle & ")."

                            If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT4_ATTNIMPORTANT, CAT4_TRIPLOG, 1) Then
                                Call StatusMeter.AddInfo("Attention", strEvent)
                            End If
                            
                        Else
                                    
                            ' Not found, Add to List for a first time
                            TripDateDuplicationList.AddItem (vKey)
                            
                        End If
                        ' 1.1 Trip Logs, Date, Shift and Vehicle# duplication end
                        '-------------------------------
                        
                        '-------------------------------
                        ' 1.2 Odometer consistency for trip logs
                        ' Copy Odometer End to Odometer Start
                        If rstTrips!MilesOut <> sngMilesOut Then
                                                
                            ' Update status info
                            If CBool(curUser.DBReadSettings("AutoCorrectOdo")) Then
                                                                      
                                           
                                strEvent = strRegNumber & ": " & _
                                           Msg("Odometer chronology", "Êèëîìåòðàæ õðîíîëîãèÿ", LAN10_BG_Bulgarian) & " " & _
                                           Msg("automatically correct", "àâòîìàòè÷íà êîðåêöèÿ", LAN10_BG_Bulgarian) & "."
                                
                                
                                strEventDetails = rstTrips!Date & " " & rstTrips!ShiftNumber & " (" & rstTrips!Vehicle & ") " & _
                                                Msg("Odometer") & ": " & Format(rstTrips!MilesOut, "#0.0") & " -> " & Format(sngMilesOut, "#0.0")
                                           
                                           
                                
                                rstTrips!MilesOut = sngMilesOut
                                
                                ' Fixed
                                If sysEvents.AddEvent(strEvent, strEventDetails, "Info", ALERT3_ATTNRECOMMENDED, CAT2_ODOMETER, 1, 1) Then
                                
                                    Call StatusMeter.AddInfo("Info", strRegNumber & ": " & rstTrips!Date & " " & rstTrips!ShiftNumber & " (" & rstTrips!Vehicle & ") " & _
                                                    Msg("Odometer chronology", "Êèëîìåòðàæ õðîíîëîãèÿ", LAN10_BG_Bulgarian) & " " & _
                                                    Msg("automatically correct", "àâòîìàòè÷íà êîðåêöèÿ", LAN10_BG_Bulgarian) & ".")
                                                    
                                End If
                                
                            Else
                                
                                ' Do not correct odometer, warning only
                                strEvent = strRegNumber & ": " & _
                                           Msg("Odometer chronology", "Êèëîìåòðàæ õðîíîëîãèÿ", LAN10_BG_Bulgarian) & " " & _
                                           Msg("inconsistent", "íåïîñëåäîâàòåëåí", LAN10_BG_Bulgarian) & "."
                                           
                                strEventDetails = rstTrips!Date & " " & rstTrips!ShiftNumber & " (" & rstTrips!Vehicle & ") " & _
                                                Msg("Odometer") & ": " & Format(rstTrips!MilesOut, "#0.0") & " - " & Format(sngMilesOut, "#0.0")
                                
                                If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT4_ATTNIMPORTANT, CAT2_ODOMETER, 1, 1) Then
                                
                                    Call StatusMeter.AddInfo("Attention", strRegNumber & ": " & rstTrips!Date & " " & rstTrips!ShiftNumber & " (" & rstTrips!Vehicle & ") " & _
                                                    Msg("Odometer chronology", "Êèëîìåòðàæ õðîíîëîãèÿ", LAN10_BG_Bulgarian) & " " & _
                                                    Msg("inconsistent", "íåïîñëåäîâàòåëåí", LAN10_BG_Bulgarian) & ".")
                                                    
                                End If
       
                            End If
                            
                        End If
                                                
                        ' Distance calculation options
                        If CBool(curUser.DBReadSettings("ExcludeNonHighwayDriveFromDistance")) Then
                            sngTripDistance = rstTrips!Highway
                        Else
                            sngTripDistance = rstTrips!Highway + rstTrips!Traffic + rstTrips!HillyTerrain + rstTrips!MountainTerrain + rstTrips!MiningTerrain
                        End If
    
                        rstTrips!MilesIn = rstTrips!MilesOut + sngTripDistance
                        
                        ' Odometer consistency
                        ' Save Odometer End for the next check
                        sngMilesOut = rstTrips!MilesIn
                        ' 1.2 Odometer consistency for trip logs
                        '-------------------------------
                        
                    End If
                    ' 1. Trip Log data check
                    ' ---------------------

                    '----------------------
                    ' 2. Check fuel related data
                    '----------------------
                    Dim bFuelRelatedDataCheck As Boolean
                    bFuelRelatedDataCheck = True
                    If bFuelRelatedDataCheck Then

                        ' 2.1 Monthly/Daily fuel consumption norm
                        If Not Fuel.IsMonthlyFuelConsumptionHighway(conConnection, lngRegNumberID, rstTrips!Date, sngFuelConsumptionHighway) And _
                                    bOncePerVehicle Then
                                    
                            ' Monthly/daily fuel consumption setting not found
                            strEvent = strRegNumber & ": " & _
                                       Msg("Setting", "Íàñòðîéêà", LAN10_BG_Bulgarian) & ": " & _
                                       Msg("Monthly/daily", "Ìåñå÷åí/äíåâåí", LAN10_BG_Bulgarian) & " " & _
                                       Msg("reference fuel consumption", "íîðìåí ðàçõîä ãîðèâî", LAN10_BG_Bulgarian) & " " & _
                                       Msg("is zero", "å íóëà", LAN10_BG_Bulgarian) & "."
                            
                            
                            strEventDetails = rstTrips!Date & " " & _
                                              Msg("Monthly/daily", "Ìåñå÷åí/äíåâåí", LAN10_BG_Bulgarian) & " " & _
                                              Msg("reference fuel consumption", "íîðìåí ðàçõîä ãîðèâî", LAN10_BG_Bulgarian) & " " & _
                                              Msg("is zero", "å íóëà", LAN10_BG_Bulgarian)
                            
                            If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT4_ATTNIMPORTANT, CAT3_Fuel, 1, 1) Then
                                Call StatusMeter.AddInfo("Attention", strEvent)
                            End If
                        
                        End If
                                            
                        '---------------------------------------------
                        ' 2.2 Adjust Odometer Refuel
                        ''If rstTrips!DataID <> 620399 Then
                        ''
                        ''Else
                        ''    MsgBox rstTrips!DataID
                        ''End If
                        ' # odoOffset
                        Dim sngOdometer As Single
                        Dim sngOdoOffset As Single
                        Dim sngOdometerNew As Single
                        Dim sngOdoOffsetNew As Single
                        
                        If AdjustOdometer(conConnection, rstTrips!DataID, rstTrips!MilesOut, rstTrips!MilesIn, sngOdometer, sngOdoOffset, sngOdometerNew, sngOdoOffsetNew) Then
                        
                            If sngOdometer <> sngOdometerNew Or _
                                sngOdoOffset <> sngOdoOffsetNew Then
                        
                                strEvent = strRegNumber & ": " & _
                                            Msg("The refuel parameters were adjusted", "Ïàðàìåòðèòå çà çàðåæäàíå ñ ãîðèâî áÿõà êîðèãèðàíè", LAN10_BG_Bulgarian) & "."
                                                                  
                                strEventDetails = rstTrips!Date & " " & rstTrips!ShiftNumber & " (" & rstTrips!Vehicle & ") " & _
                                                Msg("Odometer") & ": " & Format(sngOdometer, "#0.0") & " -> " & Format(sngOdometerNew, "#0.0") & " " & _
                                                Msg("Offset") & ": " & Format(sngOdoOffset, "#0") & " -> " & Format(sngOdoOffsetNew, "#0")
                                                   
                                If sysEvents.AddEvent(strEvent, strEventDetails, "Info", ALERT1_Info, CAT2_ODOMETER, 1, 1) Then
                                
                                    Call StatusMeter.AddInfo("Info", strRegNumber & ": " & rstTrips!Date & " " & rstTrips!ShiftNumber & " (" & rstTrips!Vehicle & ") " & _
                                                    Msg("The refuel parameters were adjusted", "Ïàðàìåòðèòå çà çàðåæäàíå ñ ãîðèâî áÿõà êîðèãèðàíè", LAN10_BG_Bulgarian) & ".")
                                                    
                                End If
                            
                            End If
                        
                        End If
                        ' Adjust Refuel Parameters
                        '---------------------------------------------
                        
                        '---------------------------------------------
                        ' 2.3 Check for pending fuel transfers
                        '---------------------------------------------
                           
                        If IsUncommittedFuelTransfer(conConnection, _
                                                    CLng(MyDictionary.SelectField("ID", "RLF Top", "RegNumberID=" & lngRegNumberID)), _
                                                    rstTrips!Date) Then
                        
                            strEvent = strRegNumber & ": " & _
                                       Msg("Pending fuel transfers", "×àêàùè ïðåõâúðëåíè ãîðèâà", LAN10_BG_Bulgarian)
                            
                            strEventDetails = rstTrips!Date & " " & rstTrips!ShiftNumber & " (" & rstTrips!Vehicle & ") " & _
                                             Msg("Pending fuel transfers", "×àêàùè ïðåõâúðëåíè ãîðèâà", LAN10_BG_Bulgarian)
                                
                            If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT4_ATTNIMPORTANT, CAT3_Fuel, 1, 1) Then
                            
                                Call StatusMeter.AddInfo("Attention", strRegNumber & ": " & strEventDetails)
                                
                            End If
                        
                        End If
                        
                    End If
                    '----------------------
                    ' 2. Check fuel related data ends
                    '----------------------

                    '---------------------------------------------
                    ' 3. KPI Freight to Trip Distance ratio and Budget
                    ' Recalculate Planned Service Cost
                    '---------------------------------------------
                    If CBool(curUser.DBReadSettings("PerformanceIndicators")) Then
                    ' Performance indicators calculation
                                        
                        sngFreightDistance = 0: sngWorkHours = 0
                        Call GetTotalBillingDistance(conConnection, rstTrips!DataID, sngFreightDistance, sngWorkHours)
                        
                        Dim CostPerKm As Double
                        Dim OutageCost As Double
                        Dim OpportunityCost As Double
                        
                        ' 3.1 Budget
                        If GetBudgetCost(lngRegNumberID, rstTrips!Date, CostPerKm, OutageCost, OpportunityCost) Then
                            
                            ' 3.1.1 Fright and Trip Distance ratio
                            If sngFreightDistance > 0 And _
                                sngTripDistance >= sngFreightDistance Then
                                ' Updates Freight Service Distance
                                Call UpdateFreightServiceDistance(conConnection, _
                                                                 rstTrips!DataID, _
                                                                 sngTripDistance, _
                                                                 sngFreightDistance, _
                                                                 sngWorkHours, _
                                                                 CostPerKm, _
                                                                 OutageCost, _
                                                                 OpportunityCost)
                                
                                sngFreight2TripRatio = 100 * (sngFreightDistance - sngTripDistance) / sngTripDistance
                                
                                ' Update status info
                                strEvent = strRegNumber & ": " & _
                                           Msg("Settings", "Íàñòðîéêè", LAN10_BG_Bulgarian) & ": " & _
                                           Msg("Freight to trip distance ratio")
                                
                                strEventDetails = rstTrips!Date & " " & rstTrips!ShiftNumber & " (" & rstTrips!Vehicle & ") " & " (" & _
                                                  Format$(sngFreight2TripRatio, "0.0") & "%)"
                                
                                If sngFreight2TripRatio < -20 Then
                                                                      
                                    If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT4_ATTNIMPORTANT, CAT5_FREIGHT, 1) Then
                                    
                                        Call StatusMeter.AddInfo("Attention", strRegNumber & ": " & rstTrips!Date & " " & rstTrips!ShiftNumber & " (" & rstTrips!Vehicle & ") " & _
                                        Msg("Freight to trip distance ratio") & " " & Format$(sngFreight2TripRatio, "0.0") & "%) " & ".")

                                    End If
                                    
                                ElseIf sngFreight2TripRatio < -5 Then
                                
                                    If sysEvents.AddEvent(strEvent, strEventDetails, "Info", ALERT2_Warning, CAT5_FREIGHT, 1) Then
                                    
                                        Call StatusMeter.AddInfo("Attention", strRegNumber & ": " & rstTrips!Date & " " & rstTrips!ShiftNumber & " (" & rstTrips!Vehicle & ") " & _
                                        Msg("Freight to trip distance ratio") & " " & Format$(sngFreight2TripRatio, "0.0") & "%) " & ".")
                                        
                                    End If
                                 
                                End If
                                
                                If Not RegNumbersList.Search(strRegNumber) Then
                            
                                    ' First encounter
                                    RegNumbersList.AddItem (strRegNumber)
                                    
                                    ' This message will appear only once
                                    If CostPerKm = 0 Then
                                    
                                        strEvent = strRegNumber & ": " & _
                                                   Msg("Setting", "Íàñòðîéêà", LAN10_BG_Bulgarian) & ": " & _
                                                   Msg("Budget cost") & " " & Msg("per km") & " " & _
                                                   Msg("is zero")
                                        
                                        If sysEvents.AddEvent(strEvent, , "Attention", ALERT4_ATTNIMPORTANT, CAT10_BUDGET, 1) Then
                                            Call StatusMeter.AddInfo("Attention", strEvent)
                                        End If
                                        
                                    End If
                                    
                                    ' KPI Budget
                                    If OutageCost = 0 Then
                                        strEvent = strRegNumber & ": " & _
                                                   Msg("Setting", "Íàñòðîéêà", LAN10_BG_Bulgarian) & ": " & _
                                                   Msg("Budget outage cost") & " " & Msg("per hour") & " " & _
                                                   Msg("is zero")
                                        
                                        If sysEvents.AddEvent(strEvent, , "Attention", ALERT4_ATTNIMPORTANT, CAT10_BUDGET, 1) Then
                                            Call StatusMeter.AddInfo("Attention", strEvent)
                                        End If
                                        
                                    End If
                                    
                                    If OpportunityCost = 0 Then
                                        strEvent = strRegNumber & ": " & _
                                            Msg("Setting", "Íàñòðîéêà", LAN10_BG_Bulgarian) & ": " & _
                                            Msg("Budget missed opportunity cost") & " " & _
                                            Msg("is zero")
                                        
                                        If sysEvents.AddEvent(strEvent, , "Info", ALERT2_Warning, CAT10_BUDGET, 1) Then
                                            Call StatusMeter.AddInfo("Info", strEvent)
                                        End If
                                        
                                    End If
                                                                                                   
                                End If
                                
                            End If
                            ' 3.1.1 Fright and Trip Distance ratio end
                                                        
                            ' 3.1.2 KPI Freight Costs
                            Dim dblCostBudget As Double
                            Dim dblFreight As Double
                            
                            Dim rstFreight As ADODB.Recordset
                            Dim StrSQLFreight As String
                            
                            StrSQLFreight = " SELECT * "
                            StrSQLFreight = StrSQLFreight & " FROM [RLF DataSub4]"
                            StrSQLFreight = StrSQLFreight & " WHERE [DataLink4] = " & rstTrips!DataID & ";"
                            
                            Set rstFreight = New ADODB.Recordset
                            rstFreight.CursorLocation = adUseClient
                            rstFreight.Open StrSQLFreight, conConnection, adOpenStatic, adLockReadOnly, adCmdText
                            
                            Do While Not rstFreight.EOF
                                
                                dblCostBudget = rstFreight!CostService + rstFreight!CostOutage + rstFreight!CostOpportunity
                                dblFreight = rstFreight!Freight
                                
                                If dblCostBudget > 0 Then
                                
                                    sngFreight2TripRatio = 100 * (dblFreight - dblCostBudget) / dblCostBudget
                                    
                                    strEvent = strRegNumber & ": " & _
                                               Msg("Setting", "Íàñòðîéêà", LAN10_BG_Bulgarian) & ": " & _
                                               Msg("Revenue to budget cost ratio")
                                    
                                    
                                    strEventDetails = rstTrips!Date & " " & rstTrips!ShiftNumber & " " & rstFreight!BillOfLading & " " _
                                    & " (" & Format$(sngFreight2TripRatio, "0.0") & "%) " & _
                                    strRegNumber & " " & Msg("Revenue to budget cost ratio")
                                                     
                                    If sngFreight2TripRatio < -20 Then
                                                                 
                                        ' Update status info
                                        If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT4_ATTNIMPORTANT, CAT5_FREIGHT, 1) Then
                                            Call StatusMeter.AddInfo("Attention", rstTrips!Date & " " & rstTrips!ShiftNumber & " " & rstFreight!BillOfLading & " " & _
                                            " (" & Format$(sngFreight2TripRatio, "0.0") & "%) " & _
                                            strRegNumber & " " & Msg("Revenue to budget cost ratio"))
                                        End If
                                        
                                    ElseIf sngFreight2TripRatio < -5 Then
                                    
                                        If sysEvents.AddEvent(strEvent, strEventDetails, "Info", ALERT2_Warning, CAT5_FREIGHT, 1) Then
                                            Call StatusMeter.AddInfo("Info", rstTrips!Date & " " & rstTrips!ShiftNumber & " " & rstFreight!BillOfLading & " " & _
                                            " (" & Format$(sngFreight2TripRatio, "0.0") & "%) " & _
                                            strRegNumber & " " & Msg("Revenue to budget cost ratio"))
                                        End If
                                        
                                    ElseIf sngFreight2TripRatio < 0 Then
                                    
                                        If sysEvents.AddEvent(strEvent, strEventDetails, "Info", ALERT2_Warning, CAT5_FREIGHT, 1) Then
                                            Call StatusMeter.AddInfo("Info", rstTrips!Date & " " & rstTrips!ShiftNumber & " " & rstFreight!BillOfLading & " " & _
                                            " (" & Format$(sngFreight2TripRatio, "0.0") & "%) " & _
                                            strRegNumber & " " & Msg("Revenue to budget cost ratio"))
                                        End If
                                        
                                    ElseIf sngFreight2TripRatio > 35 Then
                                    
                                        If sysEvents.AddEvent(strEvent, strEventDetails, "Info", ALERT2_Warning, CAT5_FREIGHT, 1) Then
                                            Call StatusMeter.AddInfo("Info", rstTrips!Date & " " & rstTrips!ShiftNumber & " " & rstFreight!BillOfLading & " " & _
                                            " (" & Format$(sngFreight2TripRatio, "0.0") & "%) " & _
                                            strRegNumber & " " & Msg("Revenue to budget cost ratio"))
                                        End If
                                     
                                    End If
                                
                                End If
                                         
                            rstFreight.MoveNext
                            Loop
                                
                            rstFreight.Close
                            ' 3.1.2 KPI Freight Costs
                            
                        End If
                        ' 3.1 Budget
                        
                        '---------------------------------------
                        ' 3.2.1 Freight distance exceeds trip distance
                        '---------------------------------------
                        If sngTripDistance < sngFreightDistance Then
                           
                           ' Update status info
                           strEvent = strRegNumber & ": " & Msg("Freight distance exceeds trip")
                            
                           strEventDetails = rstTrips!Date & " " & rstTrips!ShiftNumber & " " & rstTrips!Vehicle & _
                            " (" & Format(sngFreightDistance - sngTripDistance, "#0.0") & ") " & Msg("Freight distance exceeds trip")
                            
                           If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT4_ATTNIMPORTANT, CAT5_FREIGHT, 1) Then
                           
                               Call StatusMeter.AddInfo("Attention", strRegNumber & ": " & rstTrips!Date & " " & rstTrips!ShiftNumber & " (" & rstTrips!Vehicle & ") " & Msg("Freight distance exceeds trip"))
                               
                           End If
    
                        End If
                        '---------------------------------------
                        ' 3.2.1 Freight distance exceeds trip distance
                        '---------------------------------------
    
                        '---------------------------------------
                        ' 3.2.2 Machine shift hours and work hours ratio
                        '---------------------------------------
                        If sngWorkHours > 0 And _
                            sngTripDistance > sngWorkHours Then
                            ' Updates Freight Service Distance
                                         
                            sngFreight2TripRatio = 100 * (sngWorkHours - sngTripDistance) / sngTripDistance
                            
                            ' Update status info
                            strEvent = strRegNumber & ": " & Msg("Machine work hours utilisation")
                            
                            strEventDetails = rstTrips!Date & " " & rstTrips!ShiftNumber & " (" & rstTrips!Vehicle & ") " _
                            & " (" & Format$(sngFreight2TripRatio, "0.0") & "%) " & _
                            strRegNumber & " " & Msg("Machine work hours utilisation")
                            
                            If sngFreight2TripRatio < -20 Then
                                                                  
                                If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT4_ATTNIMPORTANT, CAT5_FREIGHT, 1) Then
                                
                                    Call StatusMeter.AddInfo("Attention", strRegNumber & ": " & rstTrips!Date & " " & rstTrips!ShiftNumber & " (" & rstTrips!Vehicle & ") " & _
                                    " (" & Format$(sngFreight2TripRatio, "0.0") & "%) " & Msg("Machine work hours utilisation"))
                                    
                                End If
                                
                            ElseIf sngFreight2TripRatio < -5 Then
                            
                                If sysEvents.AddEvent(strEvent, strEventDetails, "Info", ALERT2_Warning, CAT5_FREIGHT, 1) Then
                                
                                    Call StatusMeter.AddInfo("Info", strRegNumber & ": " & rstTrips!Date & " " & rstTrips!ShiftNumber & " (" & rstTrips!Vehicle & ") " & _
                                    " (" & Format$(sngFreight2TripRatio, "0.0") & "%) " & Msg("Machine work hours utilisation"))
                                    
                                    
                                End If
                             
                            End If
                            
                        End If
                        
                        If sngTripDistance < sngWorkHours Then
                           
                            ' Update status info
                            strEvent = strRegNumber & ": " & Msg("Work hours exceed machine shift hours")
                            
                            strEventDetails = rstTrips!Date & " " & rstTrips!ShiftNumber & " (" & rstTrips!Vehicle & ") " & _
                                                Format(sngTripDistance, "#0.0") & " " & Msg("Work hours exceed machine shift hours") & ": " & _
                                                Format(sngWorkHours - sngTripDistance, "0.0")
                            
                            If sysEvents.AddEvent(strEvent, strEventDetails, "Info", ALERT2_Warning, CAT5_FREIGHT, 1) Then
                            
                                Call StatusMeter.AddInfo("Info", strRegNumber & ": " & rstTrips!Date & " " & rstTrips!ShiftNumber & " (" & rstTrips!Vehicle & ") " & _
                                Msg("Work hours exceed machine shift hours"))
                                
                            End If
                        
                        End If
                        ' 3.2.2 Machine shift hours and work hours ratio
                                    
                    End If

                    ' Freights Consignee Duplication check
                    If CBool(curUser.DBReadSettings("FreightCustomerDuplication")) Then
                        ' Check for freights consignee duplication
                        strEvent = strRegNumber & ": " & _
                                   Msg("Consignee/Site duplication", "Äóáëèðàíå ïîëó÷àòåë/îáåêò", LAN10_BG_Bulgarian)
                                   
                        strEventDetails = rstTrips!Date & " " & rstTrips!ShiftNumber & " (" & rstTrips!Vehicle & ") " & strEvent
                        
                        strDuplicationList = ""
                        If IsConsigneeDuplicated(conConnection, rstTrips!DataID, strDuplicationList) Then
    
                           ' Customer duplication found.
                            If sysEvents.AddEvent(strEvent, strEventDetails & " " & strDuplicationList, "Attention", ALERT4_ATTNIMPORTANT, CAT5_FREIGHT, 1, 1) Then
                            
                                Call StatusMeter.AddInfo("Attention", strRegNumber & ": " & rstTrips!Date & " " & rstTrips!ShiftNumber & " (" & rstTrips!Vehicle & ") " & _
                                                Msg("Consignee/Site duplication", "Äóáëèðàíå ïîëó÷àòåë/îáåêò", LAN10_BG_Bulgarian))
                                
                            End If
    
                        End If
                    
                    End If
                    ' Freights Consignee Duplication check end
                    
                    '---------------------------------------------
                    ' 3. KPI Freight to Trip Distance ratio and Budget end
                    ' Recalculate Planned Service Cost end
                    '---------------------------------------------

                    '---------------------------------------------
                    ' 4. >> Amortization/Depreciation distribution to dates
                    If CBool(curUser.DBReadSettings("bCalculateAmortization")) Then
                    
                        Dim sngDailyMilage As Single
                        Dim sngAmortRatio As Single
                        
                        sngAmortRatio = 0
                        sngDailyMilage = DailyMilage(conConnection, lngRegNumberID, rstTrips!Date)
                        
                        If sngDailyMilage > 0 Then
                        
                            sngAmortRatio = (rstTrips!MilesIn - rstTrips!MilesOut) / sngDailyMilage
                        
                        End If
                        
                        rstTrips!TruckTrailerAmort = 0
                        
                        ' Is Amortization Distribution Applicable
                        If AmortizationNotApplicable.Search(strRegNumber) Then
                            ' Not Applicable
                        Else
                        
                            ' Apply Amortization
                            intArgs = MyDictionary.SelectFields("VehiclePurchaseCost,VehicleDateOfPurchase,VehicleDepreciationPeriod,VehicleWorkDaysInMonth,TrailerDailyAmortizationCost", _
                                                   "Trucks techdata", _
                                                    "ID=" & lngRegNumberID)
                                           
                            If Not CBool(intArgs) Then
                            ' Failed to read Vehicle amortization data
                            Else
                                                       
                                ReDim strgetOpenArg(intArgs)
                                strgetOpenArg = Split(MyDictionary.Items, Chr$(13))
                                
                                dblVehiclePurchaseCost = Format(CDbl(strgetOpenArg(0)), "#0.00")
                                dtVehicleDateOfPurchase = Format(CDate(strgetOpenArg(1)), "dd/mm/yyyy")
                                sngVehicleDepreciationPeriod = Format(CSng(strgetOpenArg(2)), "#0.00")
                                sngVehicleWorkDaysInMonth = Format(CSng(strgetOpenArg(3)), "#0.00")
                                dblTrailerDailyAmortizationCost = Format(CDbl(strgetOpenArg(4)), "#0.00")
                                
                                strEvent = strRegNumber & ": " & Msg("Amortization", "Àìîðòèçàöèÿ", LAN10_BG_Bulgarian)
                                                   
                                ' Vehicle Purchase Cost
                                If dblVehiclePurchaseCost > 0 Then
                                                           
                                    ' Checking date range
                                    ' Compare current date and DateOfPurchase
                                    lngDays = DateDiff("d", dtVehicleDateOfPurchase, rstTrips!Date)
                                    
                                    If lngDays >= 0 Then
                                        
                                        ' Current date is after the day of purchase
                                        ' Calculate Expire Date
                                        dtTruckWarrantyExpireDate = ExpireDate("d", sngVehicleDepreciationPeriod * sngVehicleWorkDaysInMonth, dtVehicleDateOfPurchase)
                                    
                                        ' Compare current date and ExpireDate
                                        lngDays = DateDiff("d", rstTrips!Date, dtTruckWarrantyExpireDate)
                                    
                                        If lngDays > 0 Then
                                    
                                            ' Current date is before the day of amortization expiry
                                            ' Calculate DailyAmortizationCost
                                            dblDailyAmortizationCost = DailyAmortizationCost(dblVehiclePurchaseCost, _
                                                                                       dtVehicleDateOfPurchase, _
                                                                                       sngVehicleDepreciationPeriod, _
                                                                                       sngVehicleWorkDaysInMonth, _
                                                                                       dblTrailerDailyAmortizationCost)
                                                                                       
                                            sngActualWorkDaysInMonth = CountWorkDaysInMonthConn(conConnection, lngRegNumberID, CalculationBegDate, CalculationEndDate)
                                                                                   
                                            ' WorkDays exceed planned work dsys
                                            If sngActualWorkDaysInMonth > sngVehicleWorkDaysInMonth Then
                                            
                                                ' Reduce planned daily depreciacion spread
                                                dblDailyAmortizationCost = dblDailyAmortizationCost * sngVehicleWorkDaysInMonth / sngActualWorkDaysInMonth
                                                
                                                ''strEvent = strRegNumber & ": " & _
                                                ''Msg("Setting", "Íàñòðîéêà", LAN10_BG_Bulgarian) & ": " & _
                                                ''Msg("Reduced daily depreciation", "Ðåäóöèðàíî äíåâíî èçõàáÿâàíå", LAN10_BG_Bulgarian)
                                                
                                                ''strEventDetails = strEvent & ": " & Format(dblDailyAmortizationCost, "#0.00")
                                            
                                                ''If sysEvents.AddEvent(strEvent, strEventDetails, "Info", ALERT1_Info, CAT10_BUDGET, 1, 1) Then
                                                ''    Call StatusMeter.AddInfo("Info", strEventDetails)
                                                ''End If
                                                
                                            End If
                                                                                   
                                            rstTrips!TruckTrailerAmort = dblDailyAmortizationCost * sngAmortRatio
                                            
                                            ' Display info
                                            ''strEvent = strRegNumber & ": " & _
                                            ''Msg("Daily depreciation", "Äíåâíî èçõàáÿâàíå", LAN10_BG_Bulgarian)
                                            
                                            ''strEventDetails = rstTrips!Date & " " & rstTrips!ShiftNumber & " (" & rstTrips!Vehicle & ") " & Format(rstTrips!TruckTrailerAmort, "#0.00")
                                        
                                            ''If sysEvents.AddEvent(strEvent, strEventDetails, "Info", ALERT1_Info, CAT10_BUDGET, 1, 1) Then
                                            ''
                                            ''    Call StatusMeter.AddInfo("Info", strRegNumber & ": " & rstTrips!Date & " " & rstTrips!ShiftNumber & " (" & rstTrips!Vehicle & ") " & _
                                            ''    Msg("Daily depreciation", "Äíåâíî èçõàáÿâàíå", LAN10_BG_Bulgarian) & " " & Format(rstTrips!TruckTrailerAmort, "#0.00"))
                                            ''
                                            ''End If
                                                                                                                               
                                        End If
                                        
                                    Else
                                    
                                        ' Current date is before the purchase date but Amortization could be applicable
                                        ''strEvent = strRegNumber & ": " & _
                                        ''       Msg("Setting", "Íàñòðîéêà", LAN10_BG_Bulgarian) & ": " & _
                                        ''       Msg("Depreciation period", "Èçõàáÿâàíå ïåðèîä", LAN10_BG_Bulgarian) & " " & _
                                        ''       Msg("not started", "íå å çàïî÷íàë", LAN10_BG_Bulgarian) & "."
                                    
                                        ''If sysEvents.AddEvent(strEvent, , "Attention", ALERT4_ATTNIMPORTANT, CAT10_BUDGET, 1) Then
                                        ''    Call StatusMeter.AddInfo("Attention", strEvent)
                                        ''End If
                                    
                                    End If
                                    ' Checking date range
                                End If
                                ' Vehicle Purchase Cost
                            End If
                            ' Failed to read Vehicle amortization data
                        End If
                    End If
                    ' 4. Amortization/Depreciation distribution to dates <<
                    ' --------------------------------------------


                    '---------------------------------------------
                    ' 5. Check Fuel Tank Capacity for each date
                    If rstTrips!FuelEnd > sngFuelTankCapacity Or rstTrips!FuelEnd < 0 Then
      
                        strEvent = strRegNumber & ": " & Msg("Fuel level", "Ãîðèâî íèâî", LAN10_BG_Bulgarian) & "."
                                       
                        If rstTrips!FuelEnd > sngFuelTankCapacity Then

                            
                            strEventDetails = Msg("Above capacity", "Íàä êàïàöèòåòà", LAN10_BG_Bulgarian) & " " & _
                                    rstTrips!Date & " " & rstTrips!ShiftNumber & " (" & rstTrips!Vehicle & ") " & _
                                    Format(rstTrips!FuelEnd, "0.0") & " (" & Format(sngFuelTankCapacity, "0.0") & _
                                    Msg("Check odometer at the point of refuel or fuel norm is low")
                                    
                                    
                            ' Display Info
                            If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT3_ATTNRECOMMENDED, CAT3_Fuel, 1, 1) Then
                        
                                Call StatusMeter.AddInfo("Attention", strRegNumber & ": " & Msg("Fuel level", "Ãîðèâî íèâî", LAN10_BG_Bulgarian) & " " & _
                                                        rstTrips!Date & " " & rstTrips!ShiftNumber & " (" & rstTrips!Vehicle & ") " & _
                                                        Format(rstTrips!FuelEnd, "0.0") & " (" & Format(sngFuelTankCapacity, "0.0"))
                            
                            End If

                        Else
                                                               
                            strEventDetails = Msg("Bellow zero", "Ïîä íóëà", LAN10_BG_Bulgarian) & " " & _
                                    rstTrips!Date & " " & rstTrips!ShiftNumber & " (" & rstTrips!Vehicle & ") " & _
                                    Format(rstTrips!FuelEnd, "0.0") & _
                                    Msg("Check odometer at the point of refuel or fuel norm is high")
                                    
                            ' Display Info
                            If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT3_ATTNRECOMMENDED, CAT3_Fuel, 1, 1) Then
                        
                                Call StatusMeter.AddInfo("Attention", strRegNumber & ": " & Msg("Fuel level", "Ãîðèâî íèâî", LAN10_BG_Bulgarian) & " " & _
                                                        rstTrips!Date & " " & rstTrips!ShiftNumber & " (" & rstTrips!Vehicle & ") " & _
                                                        Format(rstTrips!FuelEnd, "0.0"))
                            
                            End If
                                                        
                        End If
                                                            
                    End If
                    ' 5. Check Fuel Tank Capacity for each date
                    '---------------------------------------------

                    '---------------------------------------------
                    ' 6 Fuel Calculation
                    '---------------------------------------------
                    
                    ' 6.0 Check if the total fuel in the reservoir was checked at refueling - gauged on MilesIn
                    byteFuelEndGauged = 0
                    byteOilEndGauged = 0
                    ' If TripDistance is 0 then no end of trip fuel locks are allowed
                    If sngTripDistance > 0 Then
                      
                        Call IsGauged(conConnection, rstTrips!DataID, rstTrips!MilesIn, byteFuelEndGauged, byteOilEndGauged)
                        
                    End If
                    ' 6.0 Check if Fuel is gauged on MilesIn
                                       
                    ' 6.1 Beginning balance, skip this on the first pass
                    ' Remember Fuel and Oil Start for each date
                    '------------------------------------------------
                    '21 June 2010
                    If Not bOncePerVehicle Then
                            ' Fuel Start is not locked, Update Fuel Start
                            rstTrips!FuelStart = ReadWriteFuel(0, False)
                            rstTrips!OilStart = ReadWriteOil(0, False)
                    End If
                    bOncePerVehicle = False
                    ' 6.1 Beginning balance, skip this on the first pass
                    
                    '------------------------------------------------
                    ' 6.2 CalculateFuelNorm
                    ' Calculate highway fuel consumption
                    CalculatedFuelConsumptionHighway = rstTrips!Highway * sngFuelConsumptionHighway / 100
                    
                    ' Calculate non highway fuel consumption
                    CalculatedFuelConsumptionCity = 0
                    CalculatedFuelConsumptionHillyTerrain = 0
                    CalculatedFuelConsumptionMountainTerrain = 0
                    CalculatedFuelConsumptionMiningTerrain = 0

                    If CBool(curUser.DBReadSettings("ExcludeNonHighwayDriveFromDistance")) Then
                    
                        CalculatedFuelConsumptionCity = rstTrips!Traffic * sngFuelConsumptionCity / 100
                        CalculatedFuelConsumptionHillyTerrain = rstTrips!HillyTerrain * sngFuelConsumptionHillyTerrain / 100
                        CalculatedFuelConsumptionMountainTerrain = rstTrips!MountainTerrain * sngFuelConsumptionMountainTerrain / 100
                        CalculatedFuelConsumptionMiningTerrain = rstTrips!MiningTerrain * sngFuelConsumptionMiningTerrain / 100
                        
                    Else
                        
                        CalculatedFuelConsumptionCity = rstTrips!Traffic * (sngFuelConsumptionHighway + sngFuelConsumptionCity) / 100
                        CalculatedFuelConsumptionHillyTerrain = rstTrips!HillyTerrain * (sngFuelConsumptionHighway + sngFuelConsumptionHillyTerrain) / 100
                        CalculatedFuelConsumptionMountainTerrain = rstTrips!MountainTerrain * (sngFuelConsumptionHighway + sngFuelConsumptionMountainTerrain) / 100
                        CalculatedFuelConsumptionMiningTerrain = rstTrips!MiningTerrain * (sngFuelConsumptionHighway + sngFuelConsumptionMiningTerrain) / 100
                    
                    End If
                    
                    CalculatedFuelConsumptionDumpBodyLifting = 0
                    ' Calculate factor based on Courses Fuel Consumption
                    If rstTrips!Courses > 0 And sngOneCourse > 0 Then
                        CalculatedFuelConsumptionDumpBodyLifting = rstTrips!Courses * sngOneCourse
                    End If
                                                           

                    sngFuelNorm = CalculatedFuelConsumptionHighway + CalculatedFuelConsumptionCity _
                                    + CalculatedFuelConsumptionHillyTerrain + CalculatedFuelConsumptionMountainTerrain _
                                    + CalculatedFuelConsumptionMiningTerrain + CalculatedFuelConsumptionDumpBodyLifting
                                                        
                                                        
                    ' Add Fuel consumption factors if any
                    Call GetDailyFuelOilFactorsConn(conConnection, rstTrips!DataID, sngFuelFactor, sngOilFactor)
                    sngFuelNorm = sngFuelNorm + sngFuelFactor
                    ' 6.2 CalculateFuelNorm
                    '------------------------------------------------
                    
                    ' > 6.3 Get OilNorm
                    sngOilNorm = 0
                    If sngFuelConsumptionHighway > 0 Then
                        sngOilNorm = sngFuelNorm * sngOilConsumption / sngFuelConsumptionHighway + sngOilFactor
                    End If
                    ' < 6.3 Get OilNorm
                    ' Fuel & Oil planned consumption calculated
                    
                    '------------------------------------------------
                    ' 6.4 Calculate load - Fuel and Oil at the beginning of shift and added later
                    ' Get Daily Fuel & Oil Qty
                    sngDailyFuelAdded = 0: sngDailyOilAdded = 0
                    
                    vKey = "DailyQty" & CStr(rstTrips!DataID) & "1"
                    intArgs = MyDictionary.ReadWords(vKey)
                    
                    If intArgs > 0 Then
                        ' Cache Hit
                        ReDim strgetOpenArg(intArgs)
                        strgetOpenArg = Split(MyDictionary.Items, Chr$(13))
                        
                        sngDailyFuelAdded = CSng(strgetOpenArg(0))
                        sngDailyOilAdded = CSng(strgetOpenArg(1))
                                                                        
                    ' Not found, read from database
                    ElseIf GetDailyFuelOilFillupsConn(conConnection, rstTrips!DataID, sngDailyFuelAdded, sngDailyOilAdded) Then
                        ' Save to Cache
                        Call MyDictionary.WriteWords(CStr(sngDailyFuelAdded) & Chr$(13) & CStr(sngDailyOilAdded), vKey)
                    End If
                    
                    sngFuelLoad = rstTrips!FuelStart + sngDailyFuelAdded ' Fuel in main reservoar
                    sngOilLoad = rstTrips!OilStart + sngDailyOilAdded  ' Oil in main reservoar
                    ' 6.4 Calculate load - Fuel and Oil at the beginning of shift and added later
                    '------------------------------------------------


                    '--------------------------------------------
                    ' 6.5 Consumption Deviation & Alerts
                    sngIntermediateFuelDeviation = IntermediateFuelDeviation(conConnection, rstTrips!DataID, _
                                                                            rstTrips!MilesOut, rstTrips!MilesIn, _
                                                                            Format(rstTrips!FuelStart, "#0.000"), _
                                                                            Format(rstTrips!FuelEnd, "#0.000"), _
                                                                            Format(sngFuelNorm, "#0.000"), 0)
                                                                                                                                  
                    sngIntermediateOilDeviation = IntermediateFuelDeviation(conConnection, rstTrips!DataID, _
                                                        rstTrips!MilesOut, rstTrips!MilesIn, _
                                                        Format(rstTrips!OilStart, "#0.000"), _
                                                        Format(rstTrips!OilEnd, "#0.000"), _
                                                        Format(sngOilNorm, "#0.000"), 1)
                                        
                    sngFuelDeviation = sngIntermediateFuelDeviation
                    sngOilDeviation = sngIntermediateOilDeviation
                    
                    '--------------------------------------------
                    ' 6.6 Average vehicle Price & Value Deviations and Alerts
                    ' Fuel Oil Price
                    ' Difference +/-
                    ' Get Fuel and Oil Deviation
                    ' Avg Monthly Fuel Oil Price
                    dblFuelPriceAvg = 0: dblOilPriceAvg = 0
                    vKey = "AvgPrice" & CStr(rstTrips!MiddleLink) & "1"
                    
                    intArgs = MyDictionary.ReadWords(vKey)
                    If intArgs > 0 Then
                        ' Cache Hit
                        ReDim strgetOpenArg(intArgs)
                        strgetOpenArg = Split(MyDictionary.Items, Chr$(13))
                        
                        dblFuelPriceAvg = CSng(strgetOpenArg(0))
                        dblOilPriceAvg = CSng(strgetOpenArg(1))
                    
                    ' Not found, read from database
                    ElseIf GetAvgRefuelPrice(conConnection, rstTrips!MiddleLink, dblFuelPriceAvg, dblOilPriceAvg) Then
                        ' Save to Cache
                        Call MyDictionary.WriteWords(CStr(dblFuelPriceAvg) & Chr$(13) & CStr(dblOilPriceAvg), vKey)
                    End If
                    ' Avg Monthly Fuel Oil Price
                                       
                    
                    If Not dblFuelPriceAvg <> 0 Then
                    ' ZERO average fuel price
                    
                        ' > Display Info ONLY once per vehicle & period
                        If Not DisplayAvgPriceList.Search(strRegNumber) Then
                                
                            ' First time
                            DisplayAvgPriceList.AddItem (strRegNumber)
                        
                            strEvent = strRegNumber & ": " & _
                                       Msg("Fuel average price", "Ãîðèâî ñðåäíà öåíà", LAN10_BG_Bulgarian)
                                              
                            strEventDetails = Msg("Period", "Ïåðèîä", LAN10_BG_Bulgarian) & ": " & Format(CalculationBegDate, "yyyy") & "/" & Format(CalculationBegDate, "mm") & ": " & _
                                            Format(dblFuelPriceAvg, "#0.00")
                                                        
                            If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT3_ATTNRECOMMENDED, CAT3_Fuel, 1, 1) Then
                            
                                Call StatusMeter.AddInfo("Attention", strRegNumber & ": " & _
                                    Msg("Fuel average price", "Ãîðèâî ñðåäíà öåíà", LAN10_BG_Bulgarian) & ": " & _
                                    Format(dblFuelPriceAvg, "#0.00") & ".")
                                    
                            End If
                            
                        End If
                        
                    End If
                    ' < Display Info ONLY once per vehicle & period
                    
                    '--------------------------------------------
                    
                    ' Deviation Value
                    sngFuelDeviationValue = sngFuelDeviation * dblFuelPriceAvg
                    sngOilDeviationValue = sngOilDeviation * dblOilPriceAvg
                        
                    '---------------------------
                    ' Get Fuel Addition/Retention for this machine & trip
                    If sngFuelDeviationValue > 0 Then
                       ' Look up Trucks techdata table fields and assign it to current form controls.
                       sngFuelDeviationDriver = sngFuelDeviationValue * sngDevAddition
                    Else
                       sngFuelDeviationDriver = sngFuelDeviationValue * sngDevRetention
                    End If
                    '----------------------------
                   
                    If Not CBool(byteFuelEndGauged) Then
                    
                        ' Fuel End is not locked, Update Fuel End
                        rstTrips!FuelEnd = sngFuelLoad - sngFuelNorm + sngFuelDeviation
                        ' Check if we are within fuel tank range
                        If rstTrips!FuelEnd > sngFuelTankCapacity Then
                            ' Upper limit
                            sngFuelDeviation = sngFuelTankCapacity - rstTrips!FuelEnd
                            rstTrips!FuelEnd = sngFuelTankCapacity
                        ElseIf rstTrips!FuelEnd < 0 Then
                            ' Bellow Zero
                            sngFuelDeviation = -rstTrips!FuelEnd
                            rstTrips!FuelEnd = 0
                        End If
                        
                        sngFuelDeviationValue = sngFuelDeviation * dblFuelPriceAvg
                        If sngFuelDeviationValue > 0 Then
                           ' Look up Trucks techdata table fields and assign it to current form controls.
                           sngFuelDeviationDriver = sngFuelDeviationValue * sngDevAddition
                        Else
                           sngFuelDeviationDriver = sngFuelDeviationValue * sngDevRetention
                        End If
                                           
                    End If
                    
                    ' Get Oil Addition/Retention for this machine & trip
                    If sngOilDeviationValue > 0 Then
                       ' Look up Trucks techdata table fields and assign it to current form controls.
                       sngOilDeviationDriver = sngOilDeviationValue * sngDevAddition
                    Else
                       sngOilDeviationDriver = sngOilDeviationValue * sngDevRetention
                    End If
                                        
                    If Not CBool(byteOilEndGauged) Then

                        ' Fuel End is not locked, Update Fuel End
                        rstTrips!OilEnd = sngOilLoad - sngOilNorm + sngOilDeviation
                        ' Check if we are within fuel tank range
                        If rstTrips!OilEnd > sngFuelTankCapacity Then
                            ' Upper limit
                            sngOilDeviation = sngOilCapacity - rstTrips!OilEnd
                            rstTrips!OilEnd = sngOilCapacity
                        ElseIf rstTrips!OilEnd < 0 Then
                            ' Bellow Zero
                            sngOilDeviation = -rstTrips!OilEnd
                            rstTrips!OilEnd = 0

                        End If
                                                   
                        sngOilDeviationValue = sngOilDeviation * dblOilPriceAvg
                        If sngOilDeviationValue > 0 Then
                           ' Look up Trucks techdata table fields and assign it to current form controls.
                           sngOilDeviationDriver = sngOilDeviationValue * sngDevAddition
                        Else
                           sngOilDeviationDriver = sngOilDeviationValue * sngDevRetention
                        End If
                                                
                    End If
                    ' 6.6 Price Deviation and Alerts
                    '--------------------------------------------
                    
                    '--------------------------------------------
                    ' 6.7 Save calculations for fuel and oil
                    rstTrips!FuelNorm = Format(sngFuelNorm, "#0.000")
                    rstTrips!OilNorm = Format(sngOilNorm, "#0.000")
                    rstTrips!FuelAdded = Format(sngDailyFuelAdded, "#0.000")
                    rstTrips!OilAdded = Format(sngDailyOilAdded, "#0.000")
                    rstTrips!FuelLoad = Format(sngFuelLoad, "#0.000")
                    rstTrips!OilLoad = Format(sngOilLoad, "#0.000")
                    
                    rstTrips!FuelDeviation = Format(sngFuelDeviation, "#0.000")
                    rstTrips!FuelDeviationValue = Format(sngFuelDeviationValue, "#0.000")
                    rstTrips!FuelDeviationDriver = Format(sngFuelDeviationDriver, "#0.000")
                    rstTrips!OilDeviation = Format(sngOilDeviation, "#0.000")
                    rstTrips!OilDeviationValue = Format(sngOilDeviationValue, "#0.00")
                    rstTrips!OilDeviationDriver = Format(sngOilDeviationDriver, "#0.00")

                    ' Update changes
                    rstTrips.Update
                    ' 6.7 Save calculations for fuel and oil
                    '--------------------------------------------
                                                                    
                    ' Total fuel deviation
                    sngFuelDeviationTotal = sngFuelDeviationTotal + sngFuelDeviation
                    ' Total fuel deviation
                                        
                    '-------------------------------------------
                    
                    ' FuelDeviation & Alerts in detail (daily)
                    If sngFuelNorm > 0 And CBool(curUser.DBReadSettings("FuelDeviationDetails")) Then

                        ' KPI
                        ' Display Info
                        strEvent = strRegNumber & ": " & _
                                   Msg("Fuel economy", "Ãîðèâî èêîíîìèÿ", LAN10_BG_Bulgarian) & " " & _
                                   Msg("deviation", "îòêëîíåíèå", LAN10_BG_Bulgarian)
                         
                        strEventDetails = rstTrips!Date & " " & rstTrips!ShiftNumber & " (" & rstTrips!Vehicle & ") " & _
                                          Msg("deviation", "îòêëîíåíèå", LAN10_BG_Bulgarian) & ": " & Format(sngFuelDeviation, "#0.0")
                                
                        If Abs(sngFuelDeviation) > 35 Then
                                                        
                            If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT4_ATTNIMPORTANT, CAT3_Fuel, 1, 1) Then
                            
                                Call StatusMeter.AddInfo("Attention", strRegNumber & ": " & rstTrips!Date & " " & rstTrips!ShiftNumber & " (" & rstTrips!Vehicle & ") " & _
                                    Msg("Fuel economy", "Ãîðèâî èêîíîìèÿ", LAN10_BG_Bulgarian) & " " & _
                                    Msg("deviation", "îòêëîíåíèå", LAN10_BG_Bulgarian) & ": " & Format(sngFuelDeviation, "#0.0"))
                                    
                            End If
                            
                        ElseIf Abs(sngFuelDeviation) > 20 Then
                        
                            If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT3_ATTNRECOMMENDED, CAT3_Fuel, 1, 1) Then
                            
                                Call StatusMeter.AddInfo("Attention", strRegNumber & ": " & rstTrips!Date & " " & rstTrips!ShiftNumber & " (" & rstTrips!Vehicle & ") " & _
                                    Msg("Fuel economy", "Ãîðèâî èêîíîìèÿ", LAN10_BG_Bulgarian) & " " & _
                                    Msg("deviation", "îòêëîíåíèå", LAN10_BG_Bulgarian) & ": " & Format(sngFuelDeviation, "#0.0"))
                                    
                            End If

                        End If
                        
                    End If
                    ' 6.5 FuelDeviation & Alerts in detail
                    '--------------------------------------------
                                                                      
                                                                    
                    ' Remember last fuel and oil data
                    Call ReadWriteFuel(rstTrips!FuelEnd, True)
                    Call ReadWriteOil(rstTrips!OilEnd, True)
            
                    ' Assume this is the last trip for the period
                    ' Save End of Trip parameters
                    
''                    lngMiddleID = MonthlyStatEnd(conConnection, lngRegNumberID, rstTrips!MiddleLink, rstTrips!DataID, rstTrips!Date, rstTrips!FuelEnd, rstTrips!OilEnd, _
''                                    sysEvents.ALERT1_Info + sysEvents.ALERT2_Warning, sysEvents.ALERT3_Recommended + sysEvents.ALERT4_Important, sysEvents.ALERT4_Important + sysEvents.ALERT6_Urgent, _
''                                    Format(Date, "yyyy/MM/dd") & " " & Format(Time, "HH:mm") & ", " & curUser.LoginName)
''
''
''                    ''----------------
''
''
''                    strEvent = strRegNumber & ": " & Msg("Database consistency", "Ñúãëàñóâàíîñò äàííè", LAN10_BG_Bulgarian) & "."
''
''                    If Not CBool(lngMiddleID) Then
''                        ' Failed
''                        strEventDetails = Msg("Failed to copy end trip info", "Íå óñïÿ äà êîïèðà êðàéíèòå äàííè ïúòåí ëèñò", LAN10_BG_Bulgarian) & " " & _
''                                    rstTrips!Date & " (" & rstTrips!TripDay & ") - " & rstTrips!DataID
''
''                        If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT4_ATTNIMPORTANT, CAT4_TRIPLOG, 1, 1) Then
''                            Call StatusMeter.AddInfo("Attention", strEvent & " " & rstTrips!Date & " (" & rstTrips!TripDay & ") - " & " " & rstTrips!DataID)
''                        End If
''
''                    Else
                        
                        ' Success
                        sngLastFuelAdded = sngLastFuelAdded + Format(sngDailyFuelAdded, "#0.000") ' Total refuel
                        sngLastFuelEnd = Format(rstTrips!FuelEnd, "#0.000")

                        ' Odometer consistency
                        ' Save EndMileage
                        sngMilesOut = rstTrips!MilesIn
                        
                        ' 0205
                        ' Valid end pointers. FixPeriod2Vehicle
                        lngRegNumberIDFix = lngRegNumberID
                        lngMiddleIDFix = rstTrips!MiddleLink
                        lngDataIDFix = rstTrips!DataID
                        dtDateFix = rstTrips!Date
                        sngFuelEndFix = rstTrips!FuelEnd
                        sngOilEndFix = rstTrips!OilEnd

''                    End If
                    ' Copy Date, Initial Fuel and Oil to [RLF Middle] table
                    
                    sngLastFuelAdded = sngLastFuelAdded + Format(sngDailyFuelAdded, "#0.000") ' Total refuel
                    sngLastFuelEnd = Format(rstTrips!FuelEnd, "#0.000")

                    
                    StatStrSQL = " UPDATE [Trucks techdata] " & _
                                 " SET [LastFuelStart]= " & sngLastFuelStart & "," & _
                                 " [LastFuelAdded]= " & sngLastFuelAdded & "," & _
                                 " [LastFuelEnd]= " & sngLastFuelEnd & "," & _
                                 " [DriverID]= " & rstTrips!DriverID & "," & _
                                 " [LastFuelUpdate]= " & SQLDate(CalculationBegDate) & _
                                 " WHERE [ID] =" & lngRegNumberID & ";"
                                 
                                 
                    ''conConnection.BeginTrans
                    ''conConnection.Execute StatStrSQL, iAffected, adExecuteNoRecords
                    ''conConnection.CommitTrans
                    '------------------------------
                    ' 6. Fuel norm calculation end
                    '------------------------------
                    

                            
                            
                            
NextDateSameVehicle:
                                                  
                    ' Next Trip Log record
                    rstTrips.MoveNext

                Loop
                
            End If
            
            rstTrips.Close
            Set rstTrips = Nothing
            ' End of Trip Logs Loop
            '----------------------
            
            '-------------------------------------
            ' FuelDeviation & Alerts vehicle summary
            ' Display Info
            If Not CBool(curUser.DBReadSettings("FuelDeviationDetails")) Then
                ' Fuel Deviation Summary report
                strEvent = strRegNumber & ": " & _
                           Msg("Fuel economy cumulative sum", "Ãîðèâî èêîíîìèÿ îáùî", LAN10_BG_Bulgarian) & " " & _
                           Msg("deviation", "îòêëîíåíèå", LAN10_BG_Bulgarian)
                 
                strEventDetails = Msg("Deviation", "Îòêëîíåíèå", LAN10_BG_Bulgarian) & ": " & Format(sngFuelDeviationTotal, "#0.0")
                        
                If Abs(sngFuelDeviationTotal) > 50 Then
                                                
                    If sysEvents.AddEvent(strEvent, strEventDetails, "Action", ALERT5_ACTIONCRITICAL, CAT3_Fuel, 1, 1) Then
                        Call StatusMeter.AddInfo("Action", strEvent & ": " & Format(sngFuelDeviationTotal, "#0.0"))
                    End If
                    
                ElseIf Abs(sngFuelDeviationTotal) > 20 Then
                                                
                    If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT3_ATTNRECOMMENDED, CAT3_Fuel, 1, 1) Then
                        Call StatusMeter.AddInfo("Attention", strEvent & ": " & Format(sngFuelDeviationTotal, "#0.0"))
                    End If
                    
                Else
                
                    If sysEvents.AddEvent(strEvent, strEventDetails, "Info", ALERT1_Info, CAT3_Fuel, 1, 1) Then
                        Call StatusMeter.AddInfo("Info", strEvent & ": " & Format(sngFuelDeviationTotal, "#0.0"))
                    End If
                    
                End If
                
            End If
            ' FuelDeviation & Alerts vehicle summary
            '-------------------------------------

            ' Save Final Trip log data
            If Not CBool(MonthlyStatEnd(conConnection, lngRegNumberIDFix, lngMiddleIDFix, lngDataIDFix, dtDateFix, sngFuelEndFix, sngOilEndFix, _
                                    sysEvents, _
                                    Format(Date, "yyyy/MM/dd") & " " & Format(Time, "HH:mm") & ", " & curUser.LoginName)) Then
                ' Failure

                strEvent = strRegNumber & ": " & Msg("Database consistency", "Ñúãëàñóâàíîñò äàííè", LAN10_BG_Bulgarian) & "."

                ' Failed
                strEventDetails = Msg("Failed to copy final trip info", "Íå óñïÿ äà êîïèðà êðàéíèòå äàííè ïúòåí ëèñò", LAN10_BG_Bulgarian) & " " & _
                            rstTrips!Date & " (" & rstTrips!TripDay & ") - " & rstTrips!DataID

                If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT4_ATTNIMPORTANT, CAT4_TRIPLOG, 1, 1) Then
                    Call StatusMeter.AddInfo("Attention", strEvent & " " & rstTrips!Date & " (" & rstTrips!TripDay & ") - " & " " & rstTrips!DataID)
                End If

            Else
            
                ' Success
                

                         
            End If

            
            '-----------------------
            ' Update idle machines monthly fuel balance
            ''If CBool(curUser.DBReadSettings("UpdateInoperativeMachinesFuelBalance")) Then
            ''
            ''    ' Update vehicle stat for previous periods
            ''    StatStrSQL = " UPDATE [Trucks techdata] " & _
            ''                 " SET [LastFuelStart]= (LastFuelEnd) " & "," & _
            ''                 " [LastFuelAdded]= " & 0 & "," & _
            ''                 " [LastFuelUpdate]= " & SQLDate(CalculationBegDate) & _
            ''                 " WHERE [LastFuelUpdate] < " & SQLDate(CalculationBegDate) & ";"
            ''
            ''    conConnection.Execute StatStrSQL, iAffected, adExecuteNoRecords
            ''
            ''End If
            '-----------------------
            
        Else 'Vehicle Period trip log data
        
            
            ' Add period

            ' Debug
            ''Call StatusMeter.AddInfo("Action", "New period" & ": " & strRegNumber & " (" & lngRegNumberID & ")")
            ' Debug
            ''MsgBox (strRegNumber & " (" & lngRegNumberID & ")")
            
            ''GoTo VehiclePeriod
            ''If lngRegNumberID < 1563 Or lngRegNumberID > 1565 Then GoTo VehiclePeriod
            ''Call StatusMeter.AddInfo("Action", "New period" & ": " & strRegNumber & " (" & lngRegNumberID & ")")
            
            ' Check if the Asset is active
            If Not CBool(bInService) Then

                ' Out of service
                ' Skip add new period
                strEvent = strRegNumber & ": " & Msg("Out of service", "Íå ñå èçïîëçâà", LAN10_BG_Bulgarian)
                                                
                strEventDetails = Msg("Out of service", "Íå ñå èçïîëçâà", LAN10_BG_Bulgarian) & " " & CalculationBegDate & "-" & CalculationEndDate
    
                If sysEvents.AddEvent(strEvent, strEventDetails, "Info", ALERT2_Warning, CAT4_TRIPLOG, 1, 1) Then
                    Call StatusMeter.AddInfo("Info", strEvent & " " & CalculationBegDate & "-" & CalculationEndDate)
                End If
                
                ' End this vehicle and go to next
                GoTo ExitVehicle

            End If
            ' Active Asset
            
            
            ' Compile the Next Period
            Dim lngLastMiddleID As Long
            Dim intMonthLast As Integer
            Dim intYearLast As Integer
            Dim SDateLast As Date
            Dim SDateNext As Date

            intMonthLast = DatePart("m", curUser.DBReadSettings("FuelCalculationBegDate"))
            intYearLast = DatePart("YYYY", curUser.DBReadSettings("FuelCalculationBegDate"))
            SDateNext = Format(DateSerial(intYearLast, intMonthLast, 1), "dd/mm/yyyy")
            
            '' Check for the most recent monthly period
            lngLastMiddleID = GetLastPeriod(conConnection, lngRegNumberID, SDateLast)
            
            If Not CBool(lngLastMiddleID) Then
            
                ' No previous period exists
                ' Add the FIRST monthly period for the current Vehicle and next month date
                lngMiddleIDNext = AddPeriod(conConnection, lngRegNumberID, SDateNext)
                
                ' Check if successfull
                If Not CBool(lngMiddleIDNext) Then
                    
                    ' Failed to add the FIRST new period
                    strEvent = strRegNumber & ": " & Msg("Failed to add the first period", "Íå óñïÿ äà äîáàâè ïúðâèÿ ïåðèîä", LAN10_BG_Bulgarian)
                    strEventDetails = CalculationBegDate & "-" & CalculationEndDate
        
                    If sysEvents.AddEvent(strEvent, strEventDetails, "Action", ALERT5_ACTIONCRITICAL, CAT4_TRIPLOG, 1, 1) Then
                        Call StatusMeter.AddInfo("Action", strEvent & " " & strEventDetails)
                    End If
                    
                    ' Update Monthly Stat Info not relevant
                    ' End this vehicle and go to next
                    GoTo ExitVehicle
                    
                Else
                    ' The First period was added successfully
                    GoTo AddWork
                End If

            End If
           
            ' A previous period was found
            ' Calculate the number of days and months between SDateLast and SDateNext
            intDays = DateDiff("d", SDateLast, SDateNext)
            ' Calculate the number of months between SDateLast and SDateNext
            intMonths = DateDiff("m", SDateLast, SDateNext)
            
            If (intDays > 0) Then
            
                If (intMonths > 0) Then
                
                    ' Create the next period using the next date
                    lngMiddleIDNext = AddPeriod(conConnection, lngRegNumberID, SDateNext)
                    
                    If Not CBool(lngMiddleIDNext) Then
                    
                        ' Failed to add new period
                        strEvent = strRegNumber & ": " & Msg("Failed to add the next period", "Íå óñïÿ äà äîáàâè ñëåäâàùèÿ ïåðèîä", LAN10_BG_Bulgarian)
                        strEventDetails = CalculationBegDate & "-" & CalculationEndDate
            
                        If sysEvents.AddEvent(strEvent, strEventDetails, "Action", ALERT5_ACTIONCRITICAL, CAT4_TRIPLOG, 1, 1) Then
                            Call StatusMeter.AddInfo("Action", strEvent & " " & strEventDetails)
                        End If
                        
                        ' End this vehicle and go to next
                        GoTo ExitVehicle
                        
                    Else
                    
                        ' A new period was added successfully
                        GoTo AddWork
                        
                    End If
                    
                End If
                
            Else
            
                ' Failure. The next periods must be after the current one.
                strEvent = strRegNumber & ": " & Msg("Failed to add the next period", "Íå óñïÿ äà äîáàâè ñëåäâàùèÿ ïåðèîä", LAN10_BG_Bulgarian)
                
                strEventDetails = Format(SDateLast, "yyyy/mm") & " " & Msg("time order inconsistency", "âðåìåâà íåïîñëåäîâàòåëíîñò", LAN10_BG_Bulgarian) & ", " & _
                                         Format(intMonths, "#0") & " " & Msg("months", "ìåñåöà", LAN10_BG_Bulgarian) & " " & Msg("prior to the selected date", "ïðåäè èçáðàíàòà äàòà", LAN10_BG_Bulgarian)
    
                If sysEvents.AddEvent(strEvent, strEventDetails, "Action", ALERT5_ACTIONCRITICAL, CAT4_TRIPLOG, 1, 1) Then
                    Call StatusMeter.AddInfo("Action", strRegNumber & ": " & strEventDetails & ".")
                End If
                                                                  
                ' End this vehicle and go to next
                GoTo ExitVehicle
                    
            End If

AddWork:

            ' The new period already added,
            ' Transfer the last trip data to the new period
            
            ' lngMiddleIDNext already defined
            
            ' Get the last Trip log data of the last period to transfer to the next period
            lngDataIDLast = 0: sngMilesIn = 0: sngFuelEnd = 0: sngOilEnd = 0: lngDriverID = 1: lngExpCenterID = 1: lngTrailerID = 1
            lngDataIDLast = GetLastDataID(conConnection, lngLastMiddleID, SDateLast, sngMilesIn, sngFuelEnd, sngOilEnd, lngDriverID, lngExpCenterID, lngTrailerID)
            
            If Not CBool(lngDataIDLast) Then
            
                ' Use the last trip info
                ' Add the FIRST Trip data (into RLF Data) to the NEXT period and return the PrimaryKey (lngDataIDNext)
                
                lngDataIDNext = AddTrip(conConnection, lngMiddleIDNext, SDateNext, sngMilesIn, sngFuelEnd, sngOilEnd, lngDriverID, lngExpCenterID, lngTrailerID)
                
                If Not CBool(lngDataIDNext) Then
                                
                    ' Failed to add new trip
                    strEvent = strRegNumber & ": " & Msg("Failed to add new data to a period", "Íå óñïÿ äà äîáàâè íîâè äàííè â ïåðèîäà", LAN10_BG_Bulgarian)
                    strEventDetails = CalculationBegDate & "-" & CalculationEndDate
        
                    If sysEvents.AddEvent(strEvent, strEventDetails, "Action", ALERT5_ACTIONCRITICAL, CAT4_TRIPLOG, 1, 1) Then
                        Call StatusMeter.AddInfo("Action", strEvent & " " & strEventDetails)
                    End If
                    
                    ' Update Monthly Stat Info
                    If Not CBool(MonthlyStatInfo(conConnection, lngLastMiddleID, _
                                sysEvents, Format(Date, "yyyy/MM/dd") & " " & Format(Time, "HH:mm") & ", " & curUser.LoginName)) Then
                                        
                    End If
                    
                    ' End this vehicle and go to next
                    GoTo ExitVehicle
                
                End If
  
            Else
                           
                ' The last trip data was found
                ' Check if it was created using the target date
                
                intDays = DateDiff("d", SDateLast, SDateNext)
                intMonths = DateDiff("m", SDateLast, SDateNext)
                
                If (intDays > 0) Then
                 
                    If (intMonths > 0) Then
                    
                        ' Create new current trip data using the target date
                        ''If Not AddTrip(conConnection, lngLastMiddleID, SDateNext, sngMilesIn, sngFuelEnd, sngOilEnd, lngDriverID, lngExpCenterID, lngTrailerID) Then
                        
                        lngDataIDNext = AddTrip(conConnection, lngMiddleIDNext, SDateNext, sngMilesIn, sngFuelEnd, sngOilEnd, lngDriverID, lngExpCenterID, lngTrailerID)
                        If Not CBool(lngDataIDNext) Then
                    
                            ' Failed to add new trip
                            strEvent = strRegNumber & ": " & Msg("Failed to add new data to a period", "Íå óñïÿ äà äîáàâè íîâè äàííè â ïåðèîäà", LAN10_BG_Bulgarian)
                            strEventDetails = CalculationBegDate & "-" & CalculationEndDate & ", " & Format(intMonths, "#0") & " " & Msg("months", "ìåñåöè", LAN10_BG_Bulgarian)
                
                            If sysEvents.AddEvent(strEvent, strEventDetails, "Action", ALERT5_ACTIONCRITICAL, CAT4_TRIPLOG, 1, 1) Then
                                Call StatusMeter.AddInfo("Action", strEvent)
                            End If
                            
                            ' Update Monthly Stat Info
                            If Not CBool(MonthlyStatInfo(conConnection, lngMiddleIDNext, _
                                        sysEvents, Format(Date, "yyyy/MM/dd") & " " & Format(Time, "HH:mm") & ", " & curUser.LoginName)) Then
                                                
                            End If

                            
                            ' End this vehicle and go to next
                            GoTo ExitVehicle
                            
                        End If
                    
                    End If
    
                
                Else
                                
                    ' Unlikely
                    strEvent = strRegNumber & ": " & Msg("Failed to add new data to a period", "Íå óñïÿ äà äîáàâè íîâè äàííè â ïåðèîäà", LAN10_BG_Bulgarian)
                    
                    strEventDetails = Msg("Time order inconsistency", "Âðåìåâà íåïîñëåäîâàòåëíîñò", LAN10_BG_Bulgarian) & " " & _
                                        CalculationBegDate & "-" & CalculationEndDate & ", " & Format(intMonths, "#0") & " " & Msg("months", "ìåñåöè", LAN10_BG_Bulgarian)
        
                    If sysEvents.AddEvent(strEvent, strEventDetails, "Action", ALERT5_ACTIONCRITICAL, CAT4_TRIPLOG, 1, 1) Then
                        Call StatusMeter.AddInfo("Action", strRegNumber & ": " & strEventDetails)
                    End If
                    
                    ' Update Monthly Stat Info
                    If Not CBool(MonthlyStatInfo(conConnection, lngMiddleIDNext, _
                                sysEvents, Format(Date, "yyyy/MM/dd") & " " & Format(Time, "HH:mm") & ", " & curUser.LoginName)) Then
                                        
                    End If
                                        
                    ' End this vehicle and go to next
                    GoTo ExitVehicle
                        
                End If

            End If
            
            ' Update the new period using the new data
            If Not EditPeriod(conConnection, lngRegNumberID, lngDataIDNext, SDateNext, lngDataIDNext, SDateNext, sngMilesIn) Then
            
                    strEvent = strRegNumber & ": " & Msg("Failed to update the new period", "Íå óñïÿ äà àêòóàëèçèðà íîâèÿ ïåðèîä", LAN10_BG_Bulgarian)
                    strEventDetails = CalculationBegDate & "-" & CalculationEndDate & ", " & Format(intMonths, "#0") & " " & Msg("months", "ìåñåöè", LAN10_BG_Bulgarian)
        
                    If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT4_ATTNIMPORTANT, CAT4_TRIPLOG, 1, 1) Then
                        Call StatusMeter.AddInfo("Attention", strEvent & " " & strEventDetails)
                    End If
                                        
                    ' End this vehicle and go to next
                    GoTo ExitVehicle
            
            End If
            
            If Not CBool(MonthlyStatEnd(conConnection, lngRegNumberID, lngMiddleIDNext, lngDataIDNext, SDateNext, sngFuelEnd, sngOilEnd, _
                                    sysEvents, Format(Date, "yyyy/MM/dd") & " " & Format(Time, "HH:mm") & ", " & curUser.LoginName)) Then

                strEvent = strRegNumber & ": " & Msg("Database consistency", "Ñúãëàñóâàíîñò äàííè", LAN10_BG_Bulgarian) & "."

                ' Failed
                strEventDetails = Msg("Failed to copy end data info", "Íå óñïÿ äà êîïèðà êðàéíèòå äàííè", LAN10_BG_Bulgarian) & " " & _
                                            rstTrips!Date & " (" & rstTrips!TripDay & ") - " & rstTrips!DataID

                If sysEvents.AddEvent(strEvent, strEventDetails, "Attention", ALERT4_ATTNIMPORTANT, CAT4_TRIPLOG, 1, 1) Then
                    Call StatusMeter.AddInfo("Attention", strEvent & " " & rstTrips!Date & " (" & rstTrips!TripDay & ") - " & " " & rstTrips!DataID)
                End If
  
            Else
            
                ' Success
                ' Update vehicle stat
                
                ' Success added new period and trip log
                strEvent = strRegNumber & ": " & Msg("Successfully added a new period", "Óñïåøíî å äîáàâåí íîâ ïåðèîä", LAN10_BG_Bulgarian)
                strEventDetails = CalculationBegDate & "-" & CalculationEndDate
                
                If sysEvents.AddEvent(strEvent, strEventDetails, "Info", ALERT1_Info, CAT4_TRIPLOG, 1, 1) Then
                
                    Call StatusMeter.AddInfo("Info", strRegNumber & ": " & CalculationBegDate & "-" & CalculationEndDate & " " & _
                                    Msg("Successfully added a new period", "Óñïåøíî å äîáàâåí íîâ ïåðèîä", LAN10_BG_Bulgarian))
                                
                End If

            End If
                      
        End If  ' End of current Vehicle period processing
        
ExitVehicle:
        rstVehicle.Close
        Set rstVehicle = Nothing
        ' Process vehicle period trip log data
        '--------------------
        
NextActiveSet:

        If bApplyRegNumberIDFilter Then
            ' Single Vehicle, No other vehicles
            ' Go To the end
            rstActiveSet.MoveLast
        
        End If
        
        ' Next Active Vehicle from the active set
        rstActiveSet.MoveNext
    
        ' >>>> 4. StatusMeter: Increment Counter
        Call StatusMeter.UpdateMeter(1)
        ' <<<< 4. StatusMeter
    
    Loop
    ' Loop through the recordset (rstActiveSet) until the end of file (EOF) is reached

End If '
' < Main Recordset (rstActiveSet)
'--------------------

WrapUp:
rstActiveSet.Close
conConnection.Close

' > Events Stat Report
' If sysEvents.TotalMsgs > 0 Then Call StatusMeter.AddInfo("Info", Msg("Messages", "Ñúîáùåíèÿ", LAN10_BG_Bulgarian))
' If sysEvents.ALERT1_Info > 0 Then Call StatusMeter.AddInfo("Info", Msg("Info", "Èíôî", LAN10_BG_Bulgarian) & ": " & sysEvents.ALERT1_Info)
' If sysEvents.ALERT2_Warning > 0 Then Call StatusMeter.AddInfo("Info", Msg("Warning", "Ïðåäóïðåæäåíèÿ", LAN10_BG_Bulgarian) & ": " & sysEvents.ALERT2_Warning)
' If sysEvents.ALERT3_Recommended > 0 Then Call StatusMeter.AddInfo("Attention", Msg("Recommendations", "Ïðåïîðúêè", LAN10_BG_Bulgarian) & ": " & sysEvents.ALERT3_Recommended)
' If sysEvents.ALERT4_Important > 0 Then Call StatusMeter.AddInfo("Attention", Msg("Important errors", "Âàæíè ãðåøêè", LAN10_BG_Bulgarian) & ": " & sysEvents.ALERT4_Important)
' If sysEvents.ALERT5_Critical > 0 Then Call StatusMeter.AddInfo("Action", Msg("Critical errors", "Êðèòè÷íè ãðåøêè", LAN10_BG_Bulgarian) & ": " & sysEvents.ALERT5_Critical)
' If sysEvents.ALERT6_Urgent > 0 Then Call StatusMeter.AddInfo("Action", Msg("Urgent errors", "Ñïåøíè ãðåøêè", LAN10_BG_Bulgarian) & ": " & sysEvents.ALERT6_Urgent)
' < Events Stat Report

If fOK And StatusMeter.AutoHide Then
    ' End of process
    ' >>>>> 5. StatusMeter: Close the Form & Deasign the Class
    If StatusMeter.IsOpen(ahtcMeterForm) Then
        DoCmd.Close acForm, ahtcMeterForm
    End If
    ' Close the class
    Set StatusMeter = Nothing
    '<<<<< 5. End StatusMeter

ElseIf fOK And Not StatusMeter.AutoHide Then

    ' End of operation with detailed view
    
    If (curUser.PermissionLevel > UserRole.ROLE4_Support) Then
        Call StatusMeter.AddInfo("Info", "Cache" & ": " & MyDictionary.EffectivenessStr & " " & "Hits/Requests")
        Call StatusMeter.AddInfo("Info", "Cache" & ": " & MyDictionary.UtilizationStr & " " & "Used/Total")
    End If
    
    Call StatusMeter.AddInfo("Time", Msg("Time") & ": " & StatusMeter.StrTime(True) & ".")
    Call StatusMeter.AddInfoTX("Success", Msg("Done", "Ãîòîâî", LAN10_BG_Bulgarian) & ".")
    Call StatusMeter.UpdateMeter(TotalRec)
    
ElseIf Not fOK And Not StatusMeter.Details Then

    ' Cancelled by user, no detailed view
    ' >>>>> 5. StatusMeter: Close the Form & Deasign the Class
    If StatusMeter.IsOpen(ahtcMeterForm) Then
        DoCmd.Close acForm, ahtcMeterForm
    End If
    ' Close the class
    Set StatusMeter = Nothing
    '<<<<< 5. End StatusMeter
    
ElseIf Not fOK And StatusMeter.Details Then

    ' Operation cancelled by user, detail view
    
    If (curUser.PermissionLevel > UserRole.ROLE4_Support) Then
        Call StatusMeter.AddInfo("Info", "Cache" & ": " & MyDictionary.EffectivenessStr & " " & "Hits/Requests")
        Call StatusMeter.AddInfo("Info", "Cache" & ": " & MyDictionary.UtilizationStr & " " & "Used/Total")
    End If
    
    Call StatusMeter.AddInfo("Time", Msg("Time") & ": " & StatusMeter.StrTime(True) & ".")
    Call StatusMeter.AddInfoTX("Success", Msg("Done", "Ãîòîâî", LAN10_BG_Bulgarian) & ".")
    Call StatusMeter.UpdateMeter(TotalRec)
    
End If

Exit_cmdPeriods_Click:
    Set rstActiveSet = Nothing
    Set conConnection = Nothing
    
    ' >>>>>> 6. StatusMeter: Deassign the Class. Form may be still open.
    Set StatusMeter = Nothing
    ' <<<<<< 6. End StatusMeter

    Set RegNumbersList = Nothing        ' No in use!
    Set AmortizationNotApplicable = Nothing
    Set DisplayAvgPriceList = Nothing
    Set TripDateDuplicationList = Nothing
        
    ''strEvent = Trim(Msg("Online status", "Ïðèñúñòâèå", LAN10_BG_Bulgarian))
    ''strEventDetails = Msg("Command Fuel Calculation", "Êîìàíäà èç÷èñëÿâàíå íà ãîðèâî", LAN10_BG_Bulgarian)
    ''Call sysEvents.AddMessage(strEvent, strEventDetails, "Info", ALERT1_Info, CAT8_ADMIN, 1, 1)
    ''Call curUser.PerfIndex(strEventDetails, 1, TotalRec)
    

    Me.Form.Refresh                 ' Refresh data
    Me.Form.Painting = True
    DoCmd.Hourglass False
    
    ' ReAssignValues
    AssignValues
    
    ' Display Status
    Call Form_Current
    
    Call SysCmd(acSysCmdSetStatus, "Ready")
    
    Exit Sub

cmdPeriods_Click_Err:
    If Not rstActiveSet Is Nothing Then
        If rstActiveSet.State = adStateOpen Then rstActiveSet.Close
    End If
    If Not conConnection Is Nothing Then
        If conConnection.State = adStateOpen Then conConnection.Close
    End If
    Call LogMsgError(Err.Description, Err.Number, ModuleName$, "cmdPeriods_Click")
    Resume Exit_cmdPeriods_Click
End Sub

Private Sub cmdSearch_Click()

lblInfo.Caption = ""
lblInfo.Visible = False
Static bcmdSearch_Click As Boolean
If bcmdSearch_Click Then
    AssignValues
    Me.cmdSearch.Caption = Msg("Search", "Òúðñè", LAN10_BG_Bulgarian)
    Me.cmdSearch.ControlTipText = Msg("Click to perform command", "Ùðàêíåòå äà èçïúëíèòå êîìàíäàòà", LAN10_BG_Bulgarian) & vbCrLf & Me.cmdSearch.Caption
Else
    If Not IsNull(Me!txtFind) Then
        If Not StringSearch("RegNumber", Me!txtFind, Me.cmdSearch, Me.lblInfo) Then
            AssignValues
        Exit Sub
        End If
    Else
        bcmdSearch_Click = Not bcmdSearch_Click
    End If
End If
bcmdSearch_Click = Not bcmdSearch_Click   ' Change Search/View All
End Sub


Private Sub cmdSortCategoryName_Click()
Static bcmdSortCategoryName As Boolean

Call InitSortButtons         ' Reset Names
If bcmdSortCategoryName Then    ' Get Sort Order
    If Not SortAscending(Me.CategoryName.Name, Me.cmdSortCategoryName) Then Exit Sub
Else
    If Not SortDescending(Me.CategoryName.Name, Me.cmdSortCategoryName) Then Exit Sub
End If
bcmdSortCategoryName = Not bcmdSortCategoryName  ' Change Sort Order

Exit_cmdSortCategoryName_Click:
    Exit Sub

cmdSortCategoryName_Click_Err:
    MsgBox Err.Description
    Resume Exit_cmdSortCategoryName_Click
End Sub


Private Sub cmdSortReady_Click()
On Error GoTo cmdSortReady_Click_Err
Static bcmdSortReady As Boolean

Call InitSortButtons     ' Reset Names
If bcmdSortReady Then    ' Get Sort Order
    If Not SortAscending(Me.Ready.Name, Me.cmdSortReady) Then Exit Sub
Else
    If Not SortDescending(Me.Ready.Name, Me.cmdSortReady) Then Exit Sub
End If
bcmdSortReady = Not bcmdSortReady   ' Change Sort Order

Exit_cmdSortReady_Click:
    Exit Sub

cmdSortReady_Click_Err:
    MsgBox Err.Description
    Resume Exit_cmdSortReady_Click
End Sub



Private Sub cmdView_Click()


On Error GoTo cmdEdit_Click_Err

''If Me!CategoryID = 1 Then Exit Sub
' Permission
''If (PermissionToEvent(Me, ModuleName$ & " " & _
''                    "Operation: Edit", Date) < UserRole.ROLE4_Support) Then Exit Sub

DoCmd.OpenForm "CheckPeriod", , , , , , Me!MiddleID & ", " & _
                CStr(acFormEdit)


Exit_cmdEdit_Click:
    Exit Sub
cmdEdit_Click_Err:
    MsgBox Err.Description
    Resume Exit_cmdEdit_Click
End Sub

Private Sub cmdClose_Click()

DoCmd.Close

End Sub

Private Sub cmdCalculationCalendar1_Click()
On Error GoTo cmdCalculationCalendar1_Click_Err

Dim varGetDate As Variant
    
varGetDate = adhDoCalendar((Me.[CalculationBegDate]))

If Not IsNull(varGetDate) Then

    'Calculate dates
    Me.CalculationBegDate = Format(CDate(varGetDate), "dd/mm/yyyy")
    Me.CalculationEndDate = Format(tbLastDateM(Me.CalculationBegDate), "dd/mm/yyyy")
    'Save dates
    Call SetDate("FuelCalculationBegDate", Me.CalculationBegDate)
    Call SetDate("FuelCalculationEndDate", Me.CalculationEndDate)
    
    ' Apply Filter
    bApplyRegNumberIDFilter = CBool(curUser.DBReadSettings("CheckRegNumberIDFilter"))
    lngRegNumberID = CLng(curUser.DBReadSettings("CheckRegNumberID"))
    lngFilterStatus = FilterStatus(lngRegNumberID, bApplyRegNumberIDFilter, Me!CalculationBegDate, Me!CalculationEndDate)
        
    'ReAssignValues
    AssignValues
    
    ' Display Status
    Call Form_Current
                   
End If
    
Exit_cmdCalculationCalendar1_Click:
    Exit Sub

cmdCalculationCalendar1_Click_Err:
    Call LogMsgError(Err.Description, Err.Number, Form.Name, "cmdCalculationCalendar1_Click")
    Resume Exit_cmdCalculationCalendar1_Click
End Sub

Private Sub Form_Current()

Me!RegNumberID = curUser.DBReadSettings("CheckRegNumberID")
Me!ApplyRegNumberIDFilter.Value = CBool(curUser.DBReadSettings("CheckRegNumberIDFilter"))
lngRegNumberID = CLng(curUser.DBReadSettings("CheckRegNumberID"))

Dim lngTripsInPeriod As Long
Dim lngRegNumberIDInPeriod As Long
Dim lngRegNumberIDAll As Long
Dim lngRecordsInPeriod As Long
Dim lngReadyInPeriod As Long
Dim lngPeriodsTotal As Long  ' Count MiddleID
Dim lngInService As Long


' Statistics
Dim lngInfo As Long
Dim lngAttention As Long
Dim lngAction As Long
Dim lngMessagesTotal As Long

lngTripsInPeriod = 0
lngRegNumberIDInPeriod = 0
lngRegNumberIDAll = 0
lngRecordsInPeriod = 0
lngReadyInPeriod = 0
lngPeriodsTotal = 0   ' Count MiddleID
lngInService = 0

' Statistics
lngInfo = 0
lngAttention = 0
lngAction = 0
lngMessagesTotal = 0

If MyDictionary.IsSQLPopulated("SELECT [RLF Top].ID, [Trucks techdata].InService FROM [Trucks techdata] INNER JOIN [RLF Top] ON [Trucks techdata].ID = [RLF Top].RegNumberID WHERE [Trucks techdata].InService<>0") Then
    lngInService = MyDictionary.Population
End If

lngPeriodsTotal = MyDictionary.Count("MiddleID", "RLF Middle")

lngReadyInPeriod = MyDictionary.Count("MiddleID", "RLF Middle", "Ready <>0" & _
                                 " AND [FirstDate] >=" & SQLDate(GetDate("FuelCalculationBegDate")) & _
                                 " AND [LastDate] <=" & SQLDate(GetDate("FuelCalculationEndDate")))

If bAssignValues Then
    ' There are records within the selected period

    lngTripsInPeriod = MyDictionary.Count("DataID", "RLF Data", "MiddleLink =" & Nz(Me!MiddleID, 1))
    
    lngRecordsInPeriod = MyDictionary.Count("MiddleID", "RLF Middle", "FirstDate  >=" & SQLDate(GetDate("FuelCalculationBegDate")) & _
                                " AND [LastDate] <=" & SQLDate(GetDate("FuelCalculationEndDate")))
                                

    If Me!ApplyRegNumberIDFilter Then
    'Asset Selected
    
        Me!RegNumberID.Enabled = True
        
        lngRegNumberIDInPeriod = MyDictionary.Count("MiddleID", "RLF Middle", "TopLink =" & lngRegNumberID & _
                                 " AND [FirstDate] >=" & SQLDate(GetDate("FuelCalculationBegDate")) & _
                                 " AND [LastDate] <=" & SQLDate(GetDate("FuelCalculationEndDate")))
                                 
        ''lngRegNumberIDAll = DBCount("MiddleID", "RLF Middle", "TopLink =" & CLng(curUser.DBReadSettings("CheckRegNumberID")))
        lngRegNumberIDAll = MyDictionary.Count("MiddleID", "RLF Middle", "TopLink =" & lngRegNumberID)
        
                                 
        ''lngRecordsInPeriod = DBCount("MiddleID", "RLF Middle", "FirstDate  >=" & SQLDate(GetDate("FuelCalculationBegDate")) & _
        ''                         " AND [LastDate] <=" & SQLDate(GetDate("FuelCalculationEndDate")))
        
                                 
        ' Message statistics
        lblMessageStat.Caption = Msg("Messages", "Ñúîáùåíèÿ", LAN10_BG_Bulgarian) & ": " & Msg("all time periods", "âñè÷êè ïåðèîäè", LAN10_BG_Bulgarian)
        
        lngMessagesTotal = GetInfoAttentionAction(lngInfo, lngAttention, lngAction, lngRegNumberID)
                                  
    Else
    'All
       Me!RegNumberID.Enabled = False
        
       ''lngRecordsInPeriod = DBCount("MiddleID", "RLF Middle", "FirstDate  >=" & SQLDate(GetDate("FuelCalculationBegDate")) & _
       ''                         " AND [LastDate] <=" & SQLDate(GetDate("FuelCalculationEndDate")))
                                
                                                               
       ' Statistics Total
       ''lngMessagesTotal = GetInfoAttentionAction(lngInfo, lngAttention, lngAction)
       lblMessageStat.Caption = Msg("Messages", "Ñúîáùåíèÿ", LAN10_BG_Bulgarian) & ": " & Msg("within the period", "çà ïåðèîäà", LAN10_BG_Bulgarian)
       
       lngMessagesTotal = GetInfoAttentionActionPeriod(lngInfo, lngAttention, lngAction, GetDate("FuelCalculationBegDate"), GetDate("FuelCalculationEndDate"))
        
    End If

End If

' Update Stat
lblStatActionText.Caption = Msg("Urgent tasks", "Ñïåøíè çàäà÷è", LAN10_BG_Bulgarian)
lblStatAttentionText.Caption = Msg("Requiring attention", "Èçèñêâàùè âíèìàíèå", LAN10_BG_Bulgarian)
lblStatInfoText.Caption = Msg("Informative", "Èíôîðìàòèâíè", LAN10_BG_Bulgarian)

If lngMessagesTotal > 0 Then

    lblStatAction.Caption = lngAction & " (" & Format(lngAction / lngMessagesTotal, "#.0%") & ")"
    
    
    
    lblStatAttention.Caption = lngAttention & " (" & Format(lngAttention / lngMessagesTotal, "#.0%") & ")"
    
    
    lblStatInfo.Caption = lngInfo & " (" & Format(lngInfo / lngMessagesTotal, "#.0%") & ")"
                                     
    
Else
    ' All should be zeros
    lblStatAction.Caption = lngAction & " (" & Format(0, "#.0%") & ")"

                            
    lblStatAttention.Caption = lngAttention & " (" & Format(0, "#.0%") & ")"
                            
    lblStatInfo.Caption = lngInfo & " (" & Format(0, "#.0%") & ")"

End If

cmdPrevMonth.Enabled = True
cmdNextMonth.Enabled = True
cmdCalculationCalendar1.Enabled = True
CalculationBegDate.Enabled = True
CalculationEndDate.Enabled = True


' Allow Close command
cmdClose.Enabled = True

'Commands
cmdTimeliness.Enabled = True
cmdPeriods.Enabled = True
cmdView.Enabled = False

' Filter Status:
' Out of range: 0           ' Nothing selected
' Selected One Item: 1      ' One asset successfully is selected
' Selected Period: 2        ' One month period successfully is selected
Select Case lngFilterStatus
    Case 1
        cmdPeriods.ForeColor = vbBlack
        ' View Selectet Asset ONLY
        If CBool(Me!ApplyRegNumberIDFilter) Then
            cmdView.Enabled = True
        End If
    Case 2
        cmdPeriods.ForeColor = vbBlack
    Case Else
        cmdPeriods.ForeColor = vbRed
End Select

''cmdView.Enabled = False
''If bAssignValues Then
''    ' View Selectet Asset ONLY
''    If CBool(Me!ApplyRegNumberIDFilter) Then
''        cmdView.Enabled = True
''    End If
''End If

' Filter Statistics
lblInfo.ForeColor = vbBlack
lblFilterInfo.ForeColor = vbBlack

If lngRecordsInPeriod <> 0 Then

    If lngInService <> 0 Then
        ' In service assets
        lblFilterInfo.Caption = Format(lngReadyInPeriod, "#0") & " " & Msg("of", "îò", LAN10_BG_Bulgarian) & " " & Format(lngInService, "#0") & _
                                " (" & Format(100 * lngReadyInPeriod / lngInService, "#0.0") & "%)" & " " & Msg("verified", "ïðîâåðåíè", LAN10_BG_Bulgarian) & "."
    Else
        ' Out of service assets
        lblFilterInfo.Caption = Format(lngRecordsInPeriod, "#0") & " " & Msg("assets out of service", "íå èçïîëçâàíè àêòèâè", LAN10_BG_Bulgarian) & "."
    End If
    
    If lngRegNumberIDAll <> 0 Then
    
        lblInfo.Caption = Format(lngTripsInPeriod, "#0") & " " & Msg("record(s) available for viewing", "çàïèñ(è) íàëè÷íè çà ïðåãëåä", LAN10_BG_Bulgarian) & "."
        lblInfo.ForeColor = vbBlack
    
    Else
    
        ' Selected lngRegNumber not found in the period
        lblInfo.Caption = Format(0, "#0") & " " & Msg("record(s) available for viewing", "çàïèñ(è) íàëè÷íè çà ïðåãëåä", LAN10_BG_Bulgarian) & "."
        lblInfo.ForeColor = vbRed
        
    End If
    
    
Else

    ' No Records found in the selected period
    lblFilterInfo.Caption = Format(lngPeriodsTotal, "#0") & " " & Msg("monthly periods", "ìåñå÷íè ïåðèîäè", LAN10_BG_Bulgarian) & "."
    
    lblInfo.Caption = Format(0, "#0") & " " & Msg("record(s) found in the selected period", "çàïèñ(è) íàìeðåíè â èçáðàíèÿ ïåðèîä", LAN10_BG_Bulgarian) & "."
    lblInfo.ForeColor = vbRed
    
End If

End Sub

Private Sub Form_Load()

Me!CalculationBegDate = GetDate("FuelCalculationBegDate")
Me!CalculationEndDate = GetDate("FuelCalculationEndDate")
Me!CalculationBegDate.Locked = True
Me!CalculationEndDate.Locked = True

' Apply Filter
bApplyRegNumberIDFilter = CBool(curUser.DBReadSettings("CheckRegNumberIDFilter"))
lngRegNumberID = CLng(curUser.DBReadSettings("CheckRegNumberID"))
lngFilterStatus = FilterStatus(lngRegNumberID, bApplyRegNumberIDFilter, Me!CalculationBegDate, Me!CalculationEndDate)

'ReAssignValues
AssignValues

End Sub

Function AssignValues() As Boolean
On Error GoTo AssignValues_Err
' Returns Populated or not Populated Data set

' Assume Failure
AssignValues = False

bApplyRegNumberIDFilter = CBool(curUser.DBReadSettings("CheckRegNumberIDFilter"))

' Fresh Data
MyDictionary.CacheLifeTime = 0

If bApplyRegNumberIDFilter Then
    ' Filter
    lngRegNumberID = CLng(curUser.DBReadSettings("CheckRegNumberID"))

    If MyDictionary.IsSQLPopulated(" SELECT * FROM [qryChecksRegNumber] WHERE RegNumberID=" & lngRegNumberID & ";") Then
    
        Me.RecordSource = " SELECT * FROM [qryChecksRegNumber] WHERE RegNumberID=" & lngRegNumberID & ";"
        
        ' Success
        AssignValues = True
    
    Else
        ' Not populated. View all
        Me.RecordSource = " SELECT * FROM [qryChecksAll] " & ";"
    
    End If

Else

    ' View all in a given period
    If MyDictionary.IsSQLPopulated(" SELECT * FROM [qryChecks] " & ";") Then
    
        Me.RecordSource = " SELECT * FROM [qryChecks] " & ";"
        
        ' Success
        AssignValues = True
    
    Else
        
        ' Not populated. View all
        Me.RecordSource = " SELECT * FROM [qryChecksAll] " & ";"
    
    End If

End If

WrapUp:
' Return Success or Failure
bAssignValues = AssignValues

Exit_AssignValues:
    Exit Function
    
AssignValues_Err:
    MsgBox Err.Description
    Resume Exit_AssignValues
End Function

Private Sub Form_Open(Cancel As Integer)

Form.Caption = Msg("Checks", "Ïðîâåðêè", LAN10_BG_Bulgarian)

                                
lblInfo.Caption = Msg("Checks", "Ïðîâåðêè", LAN10_BG_Bulgarian) & " " & _
                        Msg("and", "è", LAN10_BG_Bulgarian) & " " & _
                        Msg("periods", "ïåðèîäè", LAN10_BG_Bulgarian)
                        
' Search
Me.txtFind.ControlTipText = Msg("Type a text to search for", "Âúâåäåòå òúðñåíèÿ òåêñò", LAN10_BG_Bulgarian)

Me.cmdSearch.ControlTipText = Msg("Type a text to search for", "Âúâåäåòå òúðñåíèÿ òåêñò", LAN10_BG_Bulgarian) & " " & _
                                Msg("and", "è", LAN10_BG_Bulgarian) & " " & _
                                Msg("Click to perform command", "Ùðàêíåòå äà èçïúëíèòå êîìàíäàòà", LAN10_BG_Bulgarian)
' Filter
lblFilter.Caption = Msg("Filter", "Ôèëòúð", LAN10_BG_Bulgarian)
''lblAsset.Caption = Msg("Asset", "Àêòèâ", LAN10_BG_Bulgarian) & ":"

Me.ApplyRegNumberIDFilter.ControlTipText = Msg("Apply filter", "Ïðèëîæè ôèëòúð", LAN10_BG_Bulgarian)
Me.RegNumberID.ControlTipText = Msg("Select an item from the list", "Èçáåðè åëåìåíò îò ñïèñúêà", LAN10_BG_Bulgarian)

LblPeriod.Caption = Msg("Period", "Ïåðèîä", LAN10_BG_Bulgarian) & ":"
lblPreviousNext1.Caption = Msg("Prevoius", "Ïðåäèøåí", LAN10_BG_Bulgarian)
lblPreviousNext2.Caption = Msg("Next", "Ñëåäâàù", LAN10_BG_Bulgarian)

lblCalculationBegDate.Caption = Msg("From Date", "Îò äàòà", LAN10_BG_Bulgarian) & ":"
lblCalculationEndDate.Caption = Msg("To Date", "Äî äàòà", LAN10_BG_Bulgarian) & ":"

Me.cmdCalculationCalendar1.ControlTipText = Msg("Calendar", "Êàëåíäàð", LAN10_BG_Bulgarian)
Me.cmdNextMonth.ControlTipText = Msg("Next month", "Ñëåäâàù ìåñåö", LAN10_BG_Bulgarian)
Me.cmdPrevMonth.ControlTipText = Msg("Previous month", "Ïðåäèøåí ìåñåö", LAN10_BG_Bulgarian)

' Sort Buttons
Call InitSortButtons

' Tips & StatusBarText
Me.RegNumber.ControlTipText = Msg("Asset name", "Èìå íà àêòèâà", LAN10_BG_Bulgarian) & vbCrLf & _
                                Msg("Double-Click to filter", "Ùðàêíåòå äâóêðàòíî äà ôèëòðèðàòå", LAN10_BG_Bulgarian)
Me.RegNumber.StatusBarText = Msg("Asset name", "Èìå íà àêòèâà", LAN10_BG_Bulgarian)

Me.Period.ControlTipText = Msg("Double-Click to select", "Ùðàêíåòå äâóêðàòíî äà èçáåðåòå", LAN10_BG_Bulgarian)
Me.Period.StatusBarText = Msg("Period", "Ïåðèîä", LAN10_BG_Bulgarian)

Me.Info.ControlTipText = Msg("Information messages", "Èíôîðìàöèííè ñúîáùåíèÿ", LAN10_BG_Bulgarian)
Me.Info.StatusBarText = Msg("Information and warning messages", "Èíôîðìàöèííè è ïðåäóïðåäèòåëíè ñúîáùåíèÿ", LAN10_BG_Bulgarian)

Me.Attention.ControlTipText = Msg("Recommended and important attention messages", "Ïðåïîðú÷èòåëíè è âàæíè ïðåäóïðåæäàâàùè ñúîáùåíèÿ", LAN10_BG_Bulgarian)
Me.Attention.StatusBarText = Msg("Attention messages", "Ïðåäóïðåæäàâàùè ñúîáùåíèÿ", LAN10_BG_Bulgarian)

Me.Action.ControlTipText = Msg("Critical and urgent action needed messages", "Êðèòè÷íè è èçèñêâàùè íåçàáàâíè äåéñòâèÿ ñúîáùåíèÿ", LAN10_BG_Bulgarian)
Me.Action.StatusBarText = Msg("Urgent action messages", "Íåçàáàâíè äåéñòâèÿ ñúîáùåíèÿ", LAN10_BG_Bulgarian)

Me.Notes.ControlTipText = Msg("Notes", "Áåëåæêè", LAN10_BG_Bulgarian)
Me.Notes.StatusBarText = Msg("Notes", "Áåëåæêè", LAN10_BG_Bulgarian)

'Command Buttons
cmdTimeliness.Caption = Msg("Timeliness", "Àêòóàëíîñò", LAN10_BG_Bulgarian)
cmdTimeliness.ControlTipText = Msg("Timeliness check", "Ïðîâåðêà íà àêòóàëíîñòòà", LAN10_BG_Bulgarian)
''cmdTimeliness.ForeColor = Red

cmdPeriods.Caption = Msg("Periods", "Ïåðèîäè", LAN10_BG_Bulgarian)
cmdPeriods.ControlTipText = Msg("Checking existing ones and creating new ones", "Ïðîâåðêà ñúùåñòâóâàùè è ñúçäàâàíå íà íîâè", LAN10_BG_Bulgarian)
''cmdPeriods.ForeColor = YellowGoldenYellow

cmdView.Caption = Msg("View", "Ïðåãëåä", LAN10_BG_Bulgarian)
cmdView.ControlTipText = Msg("View period", "Ïðåãëåä ïåðèîä", LAN10_BG_Bulgarian)

cmdClose.Caption = Msg("Close", "Çàòâîðè", LAN10_BG_Bulgarian)
cmdClose.ControlTipText = Msg("Close", "Çàòâîðè", LAN10_BG_Bulgarian)

End Sub

Private Sub Form_Unload(Cancel As Integer)
' Release our reference to ToolTips
'TTip1.Cleanup
'Set TTip1 = Nothing

End Sub

'----------------------------
'Sorting commands
Private Sub InitSortButtons()
On Error GoTo InitSortButtons_Err

' Sort Buttons Captions
cmdSortReady.Caption = ""
cmdSortReady.ControlTipText = Msg("Sort by readiness")

cmdSortRegNumber.Caption = Msg("Asset", "Àêòèâ", LAN10_BG_Bulgarian)
cmdSortRegNumber.ControlTipText = Msg("Sort by") & " " & Msg("Assets", "Àêòèâè", LAN10_BG_Bulgarian)

cmdSortCategoryName.Caption = Msg("Category", "Êàòåãîðèÿ", LAN10_BG_Bulgarian)
cmdSortCategoryName.ControlTipText = Msg("Sort by") & " " & Msg("Categories", "Êàòåãîðèè", LAN10_BG_Bulgarian)

cmdSortMessages.Caption = Msg("Message", "Ñúîáùåíèe", LAN10_BG_Bulgarian)
cmdSortMessages.ControlTipText = Msg("Sort by") & " " & Msg("Messages", "Ñúîáùåíèÿ", LAN10_BG_Bulgarian)

cmdSortPeriod.Caption = Msg("Period", "Ïåðèîä", LAN10_BG_Bulgarian)
cmdSortPeriod.ControlTipText = Msg("Sort by") & " " & Msg("Periods", "Ïåðèîäè", LAN10_BG_Bulgarian)

cmdSortNotes.Caption = Msg("Note", "Áåëåæêà", LAN10_BG_Bulgarian)
cmdSortNotes.ControlTipText = Msg("Sort by") & " " & Msg("Notes", "Áåëåæêè", LAN10_BG_Bulgarian)

Exit_InitSortButtons:
    Exit Sub

InitSortButtons_Err:
    MsgBox Err.Description
    Resume Exit_InitSortButtons
End Sub

Private Sub cmdSortMessages_Click()
Static bcmdSortMessages As Boolean

Call InitSortButtons         ' Reset Names
If bcmdSortMessages Then    ' Get Sort Order
    If Not SortAscending(Me.Action.Name, Me.cmdSortMessages) Then Exit Sub
Else
    If Not SortDescending(Me.Action.Name, Me.cmdSortMessages) Then Exit Sub
End If
bcmdSortMessages = Not bcmdSortMessages   ' Change Sort Order
End Sub

Private Sub cmdSortRegNumber_Click()
Static bcmdSortRegNumber As Boolean

Call InitSortButtons         ' Reset Names
If bcmdSortRegNumber Then    ' Get Sort Order
    If Not SortAscending(Me.RegNumber.Name, Me.cmdSortRegNumber) Then Exit Sub
Else
    If Not SortDescending(Me.RegNumber.Name, Me.cmdSortRegNumber) Then Exit Sub
End If
bcmdSortRegNumber = Not bcmdSortRegNumber  ' Change Sort Order
End Sub

Private Sub cmdSortPeriod_Click()
Static bcmdSortPeriod As Boolean

Call InitSortButtons         ' Reset Names
If bcmdSortPeriod Then    ' Get Sort Order
    If Not SortAscending(Me.Period.Name, Me.cmdSortPeriod) Then Exit Sub
Else
    If Not SortDescending(Me.Period.Name, Me.cmdSortPeriod) Then Exit Sub
End If
bcmdSortPeriod = Not bcmdSortPeriod   ' Change Sort Order
End Sub

Private Sub cmdSortNotes_Click()
Static bcmdSortNotes As Boolean

Call InitSortButtons         ' Reset Names
If bcmdSortNotes Then    ' Get Sort Order
    If Not SortAscending(Me.Notes.Name, Me.cmdSortNotes) Then Exit Sub
Else
    If Not SortDescending(Me.Notes.Name, Me.cmdSortNotes) Then Exit Sub
End If
bcmdSortNotes = Not bcmdSortNotes   ' Change Sort Order
End Sub

'Sorting commands
'----------------------------

Private Sub ApplyRegNumberIDFilter_Click()

Call curUser.DBWriteSettings("CheckRegNumberIDFilter", CStr(Abs(Me.ApplyRegNumberIDFilter)))
' Save bit settings
Call curUser.DBWriteSettings("BitStorage5", CStr(curUser.ReadMemStorage(5)))

'
If Me!ApplyRegNumberIDFilter Then
    ' Enable selection
    Me!RegNumberID.Enabled = True
Else
    ' Disable ViewAll
    Me!RegNumberID.Enabled = False
End If

' Apply Filter
bApplyRegNumberIDFilter = CBool(curUser.DBReadSettings("CheckRegNumberIDFilter"))
lngRegNumberID = CLng(curUser.DBReadSettings("CheckRegNumberID"))
lngFilterStatus = FilterStatus(lngRegNumberID, bApplyRegNumberIDFilter, Me!CalculationBegDate, Me!CalculationEndDate)

'ReAssignValues
AssignValues

' Display Status
Call Form_Current

End Sub

Private Sub Period_Click()

Dim dtBegDate As Date
Dim dtEndDate As Date
Dim intMonth As Integer
Dim intYear As Integer

intMonth = DatePart("m", Me!Period)
intYear = DatePart("YYYY", Me!Period)
dtBegDate = Format(DateSerial(intYear, intMonth, 1), "dd/mm/yyyy")
dtEndDate = Format(tbLastDateM(dtBegDate), "dd/mm/yyyy")

'Save dates
Call SetDate("FuelCalculationBegDate", dtBegDate)
Call SetDate("FuelCalculationEndDate", dtEndDate)

' Get dates
Me!CalculationBegDate = GetDate("FuelCalculationBegDate")
Me!CalculationEndDate = GetDate("FuelCalculationEndDate")
     
' Apply Filter
bApplyRegNumberIDFilter = CBool(curUser.DBReadSettings("CheckRegNumberIDFilter"))
lngRegNumberID = CLng(curUser.DBReadSettings("CheckRegNumberID"))
lngFilterStatus = FilterStatus(lngRegNumberID, bApplyRegNumberIDFilter, Me!CalculationBegDate, Me!CalculationEndDate)

'ReAssignValues
AssignValues

' Display Status
Call Form_Current

End Sub

Private Sub Period_DblClick(Cancel As Integer)

Dim dtBegDate As Date
Dim dtEndDate As Date
Dim intMonth As Integer
Dim intYear As Integer

intMonth = DatePart("m", Me!Period)
intYear = DatePart("YYYY", Me!Period)
dtBegDate = Format(DateSerial(intYear, intMonth, 1), "dd/mm/yyyy")
dtEndDate = Format(tbLastDateM(dtBegDate), "dd/mm/yyyy")

'Save dates
Call SetDate("FuelCalculationBegDate", dtBegDate)
Call SetDate("FuelCalculationEndDate", dtEndDate)

' Get dates
Me!CalculationBegDate = GetDate("FuelCalculationBegDate")
Me!CalculationEndDate = GetDate("FuelCalculationEndDate")
     
' Apply Filter
bApplyRegNumberIDFilter = CBool(curUser.DBReadSettings("CheckRegNumberIDFilter"))
lngRegNumberID = CLng(curUser.DBReadSettings("CheckRegNumberID"))
lngFilterStatus = FilterStatus(lngRegNumberID, bApplyRegNumberIDFilter, Me!CalculationBegDate, Me!CalculationEndDate)

'ReAssignValues
AssignValues

' Display Status
Call Form_Current


End Sub

Private Sub RegNumber_DblClick(Cancel As Integer)
' Copilot
' Enable/Disable and apply filter

' Check box
Me!ApplyRegNumberIDFilter = Not CBool(Me!ApplyRegNumberIDFilter)
' Selector
Me!RegNumberID.Enabled = Me!ApplyRegNumberIDFilter

' Save current RegNumberID and filter status
Call curUser.DBWriteSettings("CheckRegNumberID", CStr(Me!CurrentRegNumberID))
Call curUser.DBWriteSettings("CheckRegNumberIDFilter", CStr(Abs(Me!ApplyRegNumberIDFilter)))
Call curUser.DBWriteSettings("BitStorage5", CStr(curUser.ReadMemStorage(5)))

' Prepare filter settings
Dim bApplyRegNumberIDFilter As Boolean
bApplyRegNumberIDFilter = CBool(curUser.DBReadSettings("CheckRegNumberIDFilter"))

Dim lngRegNumberID As Long
lngRegNumberID = CLng(curUser.DBReadSettings("CheckRegNumberID"))

' Apply filter
lngFilterStatus = FilterStatus(lngRegNumberID, bApplyRegNumberIDFilter, Me!CalculationBegDate, Me!CalculationEndDate)

' ReAssignValues
AssignValues

' Display Status
Call Form_Current

End Sub


Private Sub RegNumberID_AfterUpdate()

' Save
Call curUser.DBWriteSettings("CheckRegNumberID", CStr(RegNumberID))

' Apply Filter
bApplyRegNumberIDFilter = CBool(curUser.DBReadSettings("CheckRegNumberIDFilter"))
lngRegNumberID = CLng(curUser.DBReadSettings("CheckRegNumberID"))
lngFilterStatus = FilterStatus(lngRegNumberID, bApplyRegNumberIDFilter, Me!CalculationBegDate, Me!CalculationEndDate)

'ReAssignValues
AssignValues

' Display Status
Call Form_Current

End Sub


Private Function FilterStatus(ByRef lngRegNumberID As Long, _
                         ByRef bApplyFilter As Boolean, _
                         ByRef dtBegDate As Date, _
                         ByRef dtEndDate As Date) As Long
On Error GoTo FilterStatus_Err
' Filter Status:
' Out of range: 0           ' Nothing selected
' Selected One Item: 1      ' One asset is selected
' Selected Period: 2        ' One month period is selected

' Out of range
FilterStatus = 0

Dim StrSQL As String

If bApplyFilter Then
        
    ' Clear selection
    StrSQL = " UPDATE [RLF Middle] " & _
    " SET [Selection] = " & 0 & _
    " WHERE TopLink = " & lngRegNumberID
       
    If Not uRunSQL(StrSQL, "") Then Exit Function
    
    ' Select
    StrSQL = " UPDATE [RLF Middle] " & _
    " SET [Selection] = " & 1 & _
    " WHERE TopLink = " & lngRegNumberID & _
    " AND [FirstDate] >= " & SQLDate(dtBegDate) & _
    " AND [LastDate] <= " & SQLDate(dtEndDate)
    
    If Not uRunSQL(StrSQL, "") Then Exit Function
    
    MyDictionary.CacheLifeTime = 0
    If MyDictionary.IsSQLPopulated("SELECT MiddleID FROM [RLF Middle] WHERE TopLink =" & lngRegNumberID & _
                         " AND [FirstDate] >=" & SQLDate(dtBegDate) & _
                         " AND [LastDate] <=" & SQLDate(dtEndDate) & _
                         " AND [Selection] =" & 1) Then
    
        ' Success, item selected
        FilterStatus = 1
    
    End If

Else

    ' Clear selection
    StrSQL = " UPDATE [RLF Middle] " & _
    " SET [Selection] = " & 0 & _
    " WHERE [FirstDate] >= " & SQLDate(dtBegDate) & _
    " AND [LastDate] <= " & SQLDate(dtEndDate)

    If Not uRunSQL(StrSQL, "") Then Exit Function
    
    MyDictionary.CacheLifeTime = 0
    If MyDictionary.IsSQLPopulated("SELECT MiddleID FROM [RLF Middle] WHERE [FirstDate] >=" & SQLDate(dtBegDate) & _
                     " AND [LastDate] <=" & SQLDate(dtEndDate) & _
                     " AND [Selection] =" & 0) Then
    
        ' Success, period selected
        FilterStatus = 2
    
    End If

End If

Exit_FilterStatus:
    Exit Function
    
FilterStatus_Err:
    MsgBox Err.Description
    Resume Exit_FilterStatus
End Function

Private Function CountRegNumberIDPeriods(lngRegNumberID As Long) As Long
' Count items by integrity status
On Error GoTo CountRegNumberIDPeriods_Err

CountRegNumberIDPeriods = 0

Dim conConnection As ADODB.Connection
Dim rst As ADODB.Recordset
Dim StrSQL As String

Set conConnection = CurrentProject.Connection

StrSQL = "SELECT COUNT(MiddleID) "
StrSQL = StrSQL & " FROM [RLF Middle] "
StrSQL = StrSQL & " WHERE [TopLinkID] = " & lngRegNumberID

Set rst = New ADODB.Recordset
rst.CursorLocation = adUseClient
rst.Open StrSQL, conConnection, adOpenStatic, adLockReadOnly, adCmdText

CountRegNumberIDPeriods = rst.RecordCount

WrapUp:
rst.Close
conConnection.Close

Exit_CountRegNumberIDPeriods:
    Set rst = Nothing
    Set conConnection = Nothing
    Exit Function
CountRegNumberIDPeriods_Err:
    MsgBox Err.Description
    Resume Exit_CountRegNumberIDPeriods
End Function
' Filter
'----------------------

Private Sub txtFind_LostFocus()
Call cmdSearch_Click
End Sub


'----------------------------
'On Mouse Move
Private Sub cmdClose_MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
Call OnMouseMoveArea(1, X, Y)
End Sub

Private Sub cmdView_MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
Call OnMouseMoveArea(2, X, Y)
End Sub

Private Sub cmdPeriods_MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
Call OnMouseMoveArea(3, X, Y)
End Sub

Private Sub cmdTimeliness_MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
Call OnMouseMoveArea(4, X, Y)
End Sub

Private Function OnMouseMoveArea(intCurrButton As Integer, X As Single, Y As Single) As Boolean

'MsgBox "X=" & X & " Y=" & Y
If X > 0 And X < 1125 And _
    Y > 0 And Y < 195 Then
    ToggleUIButtons intCurrButton
End If

End Function

Sub ToggleUIButtons(intCurrButton As Integer)
' This procedure formats the display properties associated with buttons on the Orders form.
Static sintLastClicked As Integer

If intCurrButton <> sintLastClicked Then
    sintLastClicked = intCurrButton
    
    With Me
        !cmdClose.FontBold = False
        !cmdView.FontBold = False
        !cmdPeriods.FontBold = False
        !cmdTimeliness.FontBold = False
      
                    
        Select Case intCurrButton
            Case 1
                !cmdClose.FontBold = True
                Call SysCmd(acSysCmdSetStatus, Msg("Close", "Çàòâîðè", LAN10_BG_Bulgarian))
            Case 2
                !cmdView.FontBold = True
                Call SysCmd(acSysCmdSetStatus, Msg("View period", "Ïðåãëåä ïåðèîä", LAN10_BG_Bulgarian))
            Case 3
                !cmdPeriods.FontBold = True
                Call SysCmd(acSysCmdSetStatus, Msg("Checking existing periods and creating new", "Ïðîâåðêà ñúùåñòâóâàùè ïåðèîäè è ñúçäàâàíå íîâè", LAN10_BG_Bulgarian))
            Case 4
                !cmdTimeliness.FontBold = True
                Call SysCmd(acSysCmdSetStatus, Msg("Timeliness check", "Ïðîâåðêà íà àêòóàëíîñòòà", LAN10_BG_Bulgarian))

        End Select
                    
    End With
    intCurrButton = sintLastClicked
End If

End Sub
'On Mouse Move
'----------------------------

Private Sub Command212_Click()
On Error GoTo Err_Command212_Click


    Screen.PreviousControl.SetFocus
    DoCmd.FindNext

Exit_Command212_Click:
    Exit Sub

Err_Command212_Click:
    MsgBox Err.Description
    Resume Exit_Command212_Click
    
End Sub
